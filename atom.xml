<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ran Xuebin&#39;s Blog</title>
  
  <subtitle>永远相信美好的事情即将发生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ranxb.cn/"/>
  <updated>2019-09-30T12:06:42.824Z</updated>
  <id>http://ranxb.cn/</id>
  
  <author>
    <name>冉学斌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zsh_is_too_slow</title>
    <link href="http://ranxb.cn/2019/09/30/zsh-is-too-slow/"/>
    <id>http://ranxb.cn/2019/09/30/zsh-is-too-slow/</id>
    <published>2019-09-30T11:54:28.000Z</published>
    <updated>2019-09-30T12:06:42.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zsh慢成💩"><a href="#zsh慢成💩" class="headerlink" title="zsh慢成💩"></a>zsh慢成💩</h1><blockquote><p>简单介绍一下，Catalina升级成zsh之后，便安装了传说中最简单配置zsh的“插件”——oh-my-zsh</p><p>但是安装好之后，速度慢的像坨翔</p><p>启动五秒</p><p>随便cd一下要三秒</p><p>随便ls一下等两秒</p><p>啊</p><p>要死了</p></blockquote><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>百度谷歌一番发现普遍都有这个问题，可能原因有很多，简单的原因这里不多说，建议先谷歌一下</p><p>问题集中在zsh的插件众多，每次执行时都会执行各种插件的东西，尤其是以git为最大的罪魁祸首。</p><p>所以，解决问题的第一步是先跟踪，定位问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsh -xv</span><br></pre></td></tr></table></figure><p>一般情况下可以发现慢的主要原因是卡在了git有关的命令上，关闭git插件后，没有任何影响，你会发现，git相关的命令是集成在主题上的，你可能可以通过使用下面的命令解决一定的问题，但是对于我来说可能不太有用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global oh-my-zsh.hide-status 1</span><br></pre></td></tr></table></figure><p>索性查看相关主题的配置源码，我用的主题是<code>fishy</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> 1 <span class="comment"># ZSH Theme emulating the Fish shell's default prompt.</span></span><br><span class="line"> 2 </span><br><span class="line"> 3 <span class="function"><span class="title">_fishy_collapsed_wd</span></span>() &#123;</span><br><span class="line"> 4   <span class="built_in">echo</span> $(<span class="built_in">pwd</span> | perl -pe <span class="string">'</span></span><br><span class="line"><span class="string"> 5    BEGIN &#123;</span></span><br><span class="line"><span class="string"> 6       binmode STDIN,  ":encoding(UTF-8)";</span></span><br><span class="line"><span class="string"> 7       binmode STDOUT, ":encoding(UTF-8)";</span></span><br><span class="line"><span class="string"> 8    &#125;; s|^$ENV&#123;HOME&#125;|~|g; s|/([^/.])[^/]*(?=/)|/$1|g; s|/\.([^/])[^/]*(?=/)|/.$1|g</span></span><br><span class="line"><span class="string"> 9 '</span>)</span><br><span class="line">10 &#125;</span><br><span class="line">11 </span><br><span class="line">12 <span class="built_in">local</span> user_color=<span class="string">'green'</span>; [ <span class="variable">$UID</span> -eq 0 ] &amp;&amp; user_color=<span class="string">'red'</span></span><br><span class="line">13 PROMPT=<span class="string">'%n@%m %&#123;$fg[$user_color]%&#125;$(_fishy_collapsed_wd)%&#123;$reset_color%&#125;%(!.#.&gt;) '</span></span><br><span class="line">14 PROMPT2=<span class="string">'%&#123;$fg[red]%&#125;\ %&#123;$reset_color%&#125;'</span></span><br><span class="line">15 </span><br><span class="line">16 <span class="built_in">local</span> return_status=<span class="string">"%&#123;<span class="variable">$fg_bold</span>[red]%&#125;%(?..%?)%&#123;<span class="variable">$reset_color</span>%&#125;"</span></span><br><span class="line">17 <span class="comment">#RPROMPT="$&#123;RPROMPT&#125;"'$&#123;return_status&#125;$(git_prompt_info)$(git_prompt_status)%&#123;$reset_color%&#125;'</span></span><br><span class="line">18 </span><br><span class="line">19 ZSH_THEME_GIT_PROMPT_PREFIX=<span class="string">" "</span></span><br><span class="line">20 ZSH_THEME_GIT_PROMPT_SUFFIX=<span class="string">""</span></span><br><span class="line">21 ZSH_THEME_GIT_PROMPT_DIRTY=<span class="string">""</span></span><br><span class="line">22 ZSH_THEME_GIT_PROMPT_CLEAN=<span class="string">""</span></span><br><span class="line">23 </span><br><span class="line">24 ZSH_THEME_GIT_PROMPT_ADDED=<span class="string">"%&#123;<span class="variable">$fg_bold</span>[green]%&#125;+"</span></span><br><span class="line">25 ZSH_THEME_GIT_PROMPT_MODIFIED=<span class="string">"%&#123;<span class="variable">$fg_bold</span>[blue]%&#125;!"</span></span><br><span class="line">26 ZSH_THEME_GIT_PROMPT_DELETED=<span class="string">"%&#123;<span class="variable">$fg_bold</span>[red]%&#125;-"</span></span><br><span class="line">27 ZSH_THEME_GIT_PROMPT_RENAMED=<span class="string">"%&#123;<span class="variable">$fg_bold</span>[magenta]%&#125;&gt;"</span></span><br><span class="line">28 ZSH_THEME_GIT_PROMPT_UNMERGED=<span class="string">"%&#123;<span class="variable">$fg_bold</span>[yellow]%&#125;#"</span></span><br><span class="line">29 ZSH_THEME_GIT_PROMPT_UNTRACKED=<span class="string">"%&#123;<span class="variable">$fg_bold</span>[cyan]%&#125;?"</span></span><br></pre></td></tr></table></figure><p>发现git相关的命令集成在<code>RPROMPT=&quot;${RPROMPT}&quot;&#39;${return_status}$(git_prompt_info)$(git_prompt_status)%{$reset_color%}&#39;</code>索性全部注释掉</p><h2 id="爽"><a href="#爽" class="headerlink" title="爽"></a>爽</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;zsh慢成💩&quot;&gt;&lt;a href=&quot;#zsh慢成💩&quot; class=&quot;headerlink&quot; title=&quot;zsh慢成💩&quot;&gt;&lt;/a&gt;zsh慢成💩&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;简单介绍一下，Catalina升级成zsh之后，便安装了传说中最简单配置z
      
    
    </summary>
    
      <category term="zsh" scheme="http://ranxb.cn/categories/zsh/"/>
    
    
      <category term="linux" scheme="http://ranxb.cn/tags/linux/"/>
    
      <category term="zsh" scheme="http://ranxb.cn/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>vim笔记</title>
    <link href="http://ranxb.cn/2019/09/30/vim/"/>
    <id>http://ranxb.cn/2019/09/30/vim/</id>
    <published>2019-09-30T11:00:51.000Z</published>
    <updated>2019-09-30T12:50:27.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vim-笔记"><a href="#Vim-笔记" class="headerlink" title="Vim 笔记"></a>Vim 笔记</h1><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><ul><li>i——insert（字母前）</li><li>a——append（字母后）</li><li>o——below（下一行）</li><li>A——append after line（行后）</li><li>I——insert before line（行前）</li><li>O——above line（上一行）</li></ul><ul><li>ctrl+u——删除行</li><li>ctrl+w——删除字</li><li>ctrl+a——移动到最前</li><li>ctrl+e——移动到最后</li><li>gi——移动到上一次编辑的地方 </li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li><code>:vs</code>——左右分屏</li><li><code>:sp</code>——上下分屏</li><li><code>:q</code>——退出屏幕</li></ul><ul><li>v——选中模式</li><li>V——行选中</li><li>ctrl+v——块选中</li><li>y——复制</li><li>p——粘贴</li><li>u——撤销</li><li>d——删除</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vim-笔记&quot;&gt;&lt;a href=&quot;#Vim-笔记&quot; class=&quot;headerlink&quot; title=&quot;Vim 笔记&quot;&gt;&lt;/a&gt;Vim 笔记&lt;/h1&gt;&lt;h2 id=&quot;编辑&quot;&gt;&lt;a href=&quot;#编辑&quot; class=&quot;headerlink&quot; title=&quot;编辑&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="vim" scheme="http://ranxb.cn/categories/vim/"/>
    
    
      <category term="vim" scheme="http://ranxb.cn/tags/vim/"/>
    
      <category term="linux" scheme="http://ranxb.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux后台运行脚本的指令</title>
    <link href="http://ranxb.cn/2019/07/19/howtorunscriptonlinux/"/>
    <id>http://ranxb.cn/2019/07/19/howtorunscriptonlinux/</id>
    <published>2019-07-19T13:27:14.000Z</published>
    <updated>2019-07-19T13:34:05.884Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写给RoseauHan的</p></blockquote><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>举个栗子</p><p><code>sudo nohup python3 -u AppleDeliverMail.py &gt; log &amp; echo $! &gt; pid</code></p><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>nohup一般是需要挂后台长时间执行的脚本用的。<br>bg和fg指令只用于切换终端的前后台进程，如果终端断开连接，脚本也会被退出，所以长时间的脚本一般情况用nohup指令</p><h2 id="Stop"><a href="#Stop" class="headerlink" title="Stop"></a>Stop</h2><p>命令后面会保存pid到文件中，所以不用担心pid找不到（找不到就ps呗，但是我还是喜欢记下来），终止的时候kill掉就好了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;写给RoseauHan的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;How&quot;&gt;&lt;a href=&quot;#How&quot; class=&quot;headerlink&quot; title=&quot;How&quot;&gt;&lt;/a&gt;How&lt;/h2&gt;&lt;p&gt;举个栗子&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s
      
    
    </summary>
    
      <category term="脚本" scheme="http://ranxb.cn/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>毛概下重点整理</title>
    <link href="http://ranxb.cn/2019/06/22/%E6%AF%9B%E6%A6%82%E4%B8%8B%E9%87%8D%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>http://ranxb.cn/2019/06/22/毛概下重点整理/</id>
    <published>2019-06-21T16:16:11.000Z</published>
    <updated>2019-06-21T17:00:31.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="毛概下重点整理"><a href="#毛概下重点整理" class="headerlink" title="毛概下重点整理"></a>毛概下重点整理</h1><blockquote><p>从台湾回来要补修政治课。。。。。。。大部分都是女朋友教我的，我做一下整理。</p></blockquote><h2 id="如何理解我国社会主义矛盾发生的变化"><a href="#如何理解我国社会主义矛盾发生的变化" class="headerlink" title="如何理解我国社会主义矛盾发生的变化"></a>如何理解我国社会主义矛盾发生的变化</h2><blockquote><p>3次矛盾的变化</p></blockquote><ul><li><p>三次矛盾分别是</p><ul><li><p>是⼈⺠民对于建⽴先进的⼯业国的要求同落后的农业国的现实之间的⽭盾，是⼈⺠民对于经济⽂化迅速发展的需要同当前经济⽂化不能满⾜⼈⺠民需要的状况之间 的⽭盾。 </p></li><li><p>⼈⺠民⽇益增⻓长的物质⽂化需要同落后的社会⽣产之间的⽭盾。 </p></li><li><p>⼈⺠民⽇益增⻓长的美好⽣活需要和不平衡不充分的发展之间的⽭盾。</p></li></ul></li><li><p>我国的社会主要矛盾的变化，没有改变我们对我国社会主义所处历史阶段的判断，我国仍处理并将长期处于社会主义初级阶段的基本国情没有变，我国是世界上最大的发展中国家的国际地位也没有变。</p></li><li><p>领导和团结全国各族人民，以经济建设为中心。坚持四项基本原则，坚持改革开放，自力更生，艰苦创业，为把我国建设成为富强民主文明和谐美丽的社会主义现代化强国而奋斗。</p></li></ul><h3 id="如何正确理解坚持党的领导、人民当家作主和依法治国的有机统一"><a href="#如何正确理解坚持党的领导、人民当家作主和依法治国的有机统一" class="headerlink" title="如何正确理解坚持党的领导、人民当家作主和依法治国的有机统一"></a>如何正确理解坚持党的领导、人民当家作主和依法治国的有机统一</h3><p>走中国特色社会主义政治发展道路，必须坚持党的领导、人民当家作主、依法治国的有机统一。</p><p>党的领导是人民当家作主和依法治国的根本保证，人民当家作主是社会主义民主政治的本质特征，依法治国是党领导人民治理国家的基本方式，三者统一于我国社会主义民主政治的伟大实践。</p><ul><li>坚持党的领导，就要发挥党总揽全局、协调各方的领导核心作用。改进党的领导方式和执政方式，保证党领导人民有效治理国家</li><li>实现人民当家作主，就要扩大人民有序政治参与，保证人民依法实行民主选举、民主协商、民主决策、民主管理、民主监督。巩固基层政权，完善基层民主制度，保障人民知情权、参与权、表达权、监督权</li><li>坚持依法治国，就要维护国家法制统一、尊严、权威，加强人权法治保障，保证人民依法享有广泛权利和自由。健全依法决策机制，构建决策科学、执行坚决、监督有力的权利运行机制</li></ul><h2 id="如何建设美丽中国"><a href="#如何建设美丽中国" class="headerlink" title="如何建设美丽中国"></a>如何建设美丽中国</h2><blockquote><p>生态文明建设</p></blockquote><ul><li>建设⽣态⽂明是关系⼈⺠民福祉、关乎⺠民族未来的千年⼤计，是实现中华⺠民族伟 ⼤复兴的重要战略任务。 </li><li>坚持⼈与⾃然和谐共⽣，树⽴和践⾏绿⽔⻘青⼭就是⾦⼭银⼭理念，推动形成绿 ⾊发展⽅式和⽣活⽅式，统筹⼭⽔林⽥湖草系统治理，实⾏最严格⽣态环境保护 制度，开创⽣态⽂明建设和环境保护新局⾯。</li></ul><h2 id="决胜全面建成小康社会提出了哪些新的要求"><a href="#决胜全面建成小康社会提出了哪些新的要求" class="headerlink" title="决胜全面建成小康社会提出了哪些新的要求"></a>决胜全面建成小康社会提出了哪些新的要求</h2><p>全⾯建成⼩康社会，覆盖领域要全⾯，是“五位⼀体”的全⾯ 要实事求是、因地制宜、全⾯建成⼩康社会是针对全国讲的不是每个地区、每个 ⺠民族、每个⼈达到同⼀⽔平。</p><blockquote><p>五位一体：</p><ul><li>经济建设</li><li>政治建设</li><li>文化建设</li><li>社会建设</li><li>生态文明建设</li></ul><p>四个全面</p><ul><li>全面建成小康社会</li><li>全面深化改革</li><li>全面依法治国</li><li>全面从严治党</li></ul></blockquote><h2 id="如何理解构建人类命运共同体思想的科学内涵"><a href="#如何理解构建人类命运共同体思想的科学内涵" class="headerlink" title="如何理解构建人类命运共同体思想的科学内涵"></a>如何理解构建人类命运共同体思想的科学内涵</h2><p>内涵（核⼼）：“建设持久和平、普遍安全、共同繁荣、开放包容、清洁美丽的世界” </p><ul><li>政治上，要互相尊重、平等协商 。</li><li>安全上，要就坚持以对话解决争端、以协商化解分歧，统筹应对传统和⾮传安 全安全威胁，反对⼀切形式的恐怖主义。 </li><li>经济上，要同⾈共济，促进贸易和投资⾃由化便利化，推动经济全球化朝着更 加开放、包容、普惠、平衡、共赢的⽅向发展。</li><li>⽂化上，要尊重世界⽂明多样性 E ⽣态上，要坚持环境友好，合作应对⽓候变化，保护好⼈类赖以⽣存的地球家园。</li></ul><h2 id="如何理解当时最高政治领导力量"><a href="#如何理解当时最高政治领导力量" class="headerlink" title="如何理解当时最高政治领导力量"></a>如何理解当时最高政治领导力量</h2><blockquote><p>如何理解当时历史和人民的选择</p></blockquote><ol><li>中国共产党是中国⼯⼈阶级的先锋队，同时也是中国⼈⺠民和中华⺠民族 的先锋队。是中国特⾊社会主义事业的领导核⼼。<strong>（党的地位重要性）</strong></li><li>中国共产党成⽴以后，团结带领中国⼈⺠民，建⽴中华⼈⺠民共和国，完 成社会主义⾰命，确⽴社会主义基本制度，消灭剥削，进⾏改⾰开放新的违⼤⾰ 命，极⼤激发⼴⼤⼈⺠民群众的创造性。近代以来，争取⺠民族独⽴、⼈⺠民解放，实 现国家富强、⼈⺠民幸福，是中国⼈⺠民必须完成的两⼤历史任务。<strong>（党的伟绩）</strong></li><li>历史表明，历史和⼈⺠民选择中国共产党领导中华⺠民族伟⼤复兴的事业 是正确的，中国共产党领导中国⼈⺠民开辟的中国特⾊社会主义道路是正确的，中 国共产党和中国⼈⺠民扎根中国⼤地、、吸纳⼈类⽂明的优秀成果、独⽴⾃主实现 国家发展的战略是正确的，必须⻓长期坚持、绝不动摇；<strong>（历史⻆角度）</strong></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="改革开放"><a href="#改革开放" class="headerlink" title="改革开放"></a>改革开放</h3><p><strong>四个基于：</strong></p><ul><li>是基于对党和国家前途命运的深刻把握是 </li><li>是基于对社会主义⾰命和建设实践的深刻总结 </li><li>是基于对时代潮流的深刻洞察 </li><li>是基于对⼈⺠民群众期盼和需要的深刻体悟</li></ul><p>评价：是我们党的⼀次伟⼤觉醒。是中国⼈⺠和中华⺠民族发展史上⼀次伟⼤⾰命。</p><h3 id="供给侧改革"><a href="#供给侧改革" class="headerlink" title="供给侧改革"></a>供给侧改革</h3><ol><li>推动产业优化升级，加快发展先进制造业为重点全⾯提升实体经济。 </li><li>深化要素市场化配置改⾰，实现由以价取胜向以质取胜的转变。 </li><li>注重调动和保护⼈的积极性 </li><li>优化市场供求结构，坚持去产能、去杠杆</li></ol><h3 id="新时代如何坚持⾛中国特⾊社会主义道路"><a href="#新时代如何坚持⾛中国特⾊社会主义道路" class="headerlink" title="新时代如何坚持⾛中国特⾊社会主义道路"></a>新时代如何坚持⾛中国特⾊社会主义道路</h3><blockquote><p><strong>十四个坚持：</strong></p><p>坚持党对⼀切⼯作的领导；坚持以⼈⺠民为中⼼；</p><p>坚持全⺠民深化改⾰；坚持新发展 理念；</p><p>坚持⼈⺠民当家作主；坚持全⾯依法治国；</p><p>坚持社会主义核⼼价值体系；坚持在发展中保障和改善⺠民⽣；</p><p>坚持⼈与⾃然和谐共⽣；坚持总体国家安全观；</p><p>坚持党对⼈⺠民军队的绝对领导；坚持⼀国两制和推荐祖国统⼀；</p><p>坚持推动构建⼈类命运共同体；坚持全⾯从严治党；</p></blockquote><h3 id="新时代如何推进现代化经济体系建设"><a href="#新时代如何推进现代化经济体系建设" class="headerlink" title="新时代如何推进现代化经济体系建设"></a>新时代如何推进现代化经济体系建设</h3><ul><li>坚持以新发展理念为指导，以供给侧结构改革为主线<ul><li>贯彻新发展理念，坚持质量第一、效益优先</li><li>坚持以供给侧结构性改革为主线推动和各项经济工作</li><li>推动经济发展质量变革，效率变革，动力变革</li></ul></li><li>加快建设适应现代化经济体系要求的产业体系和经济体制<ul><li>着力加快建设实体经济、科技创新、现代金融、人力资源协同发展的产业体系</li><li>着力构建市场机制有效、微观主体有活力、宏观调控有度的经济体制</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;毛概下重点整理&quot;&gt;&lt;a href=&quot;#毛概下重点整理&quot; class=&quot;headerlink&quot; title=&quot;毛概下重点整理&quot;&gt;&lt;/a&gt;毛概下重点整理&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;从台湾回来要补修政治课。。。。。。。大部分都是女朋友教我的，我做一下整理。
      
    
    </summary>
    
      <category term="笔记" scheme="http://ranxb.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次微信小程序开发的经历</title>
    <link href="http://ranxb.cn/2019/06/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    <id>http://ranxb.cn/2019/06/05/记一次微信小程序开发的经历/</id>
    <published>2019-06-05T02:38:21.000Z</published>
    <updated>2019-06-05T02:38:21.734Z</updated>
    
    <content type="html"><![CDATA[<p>小程序</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;小程序&lt;/p&gt;

      
    
    </summary>
    
      <category term="随笔" scheme="http://ranxb.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL中文的坑</title>
    <link href="http://ranxb.cn/2019/06/04/MySQL%E4%B8%AD%E6%96%87%E7%9A%84%E5%9D%91/"/>
    <id>http://ranxb.cn/2019/06/04/MySQL中文的坑/</id>
    <published>2019-06-04T07:28:46.000Z</published>
    <updated>2019-06-04T07:28:46.605Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>小程序准备上线了，为了保证稳定性和数据库的安全准备从sqlite迁移到mysql，结果我就日了狗了。。。。。</p></blockquote><p>现象：mysql中文字段报错：比如：<code>Incorrect string value: ‘\xF0\x9F\x98\x83 &lt;…’ for column ‘summary’ at row 1</code><br>问题：明显是编码错误，环境是Macos+python3+Django。和明显不是我的编码问题。于是直接进行数据库操作<code>insert into app_lzuuserinfo (anameu) values (&quot;冉&quot;);</code>还是报错，说明是数据库的编码问题<br>解决：</p><p>这tm我就要好好说道说道了。第一步百度，答案清一色的是该数据库编码格式为utf8，但是我的数据库就是utf8的。无语，陷入死胡同，于是总觉得是没有生效的问题反复使用和修改<code>set character_set_character=utf8;</code><br>和mysqld.cnf。最后毫无用处。</p><p>第二步，roseahan去Google了一下。。。。于是看到了这篇文章：</p><blockquote><p><a href="https://medium.com/@adamhooper/in-mysql-never-use-utf8-use-utf8mb4-11761243e434" target="_blank" rel="noopener">https://medium.com/@adamhooper/in-mysql-never-use-utf8-use-utf8mb4-11761243e434</a></p></blockquote><p>mdzz….<br>大概意思如下：mysql的utf8不是我们的UTF-8，他的utf8是3个byte的编码格式，我们的UTF-8是四个字节的编码格式，所以改了utf8也不可能生效，所以我不知道为什么大家清一色的去改utf8…而且文章提出是mysql一直以来的bug没有解决，官方给出的解决方案是使用<code>utf8mb4</code>编码，这里的才是我们使用的UTF-8编码格式，同时emoji也是使用的这种格式。同时这个bug解决不了，官方也一直没有“声张”，所以。。。。。nb。下面给出解决方案，可以的话还是去我刚才的网站看吧。</p><p>method：  </p><blockquote><p><a href="https://mathiasbynens.be/notes/mysql-utf8mb4#utf8-to-utf8mb4" target="_blank" rel="noopener">https://mathiasbynens.be/notes/mysql-utf8mb4#utf8-to-utf8mb4</a><br>require：mysql &gt; 5.5.3</p><ol><li>对于已存在的表：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># For each database:</span><br><span class="line">ALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;</span><br><span class="line"># For each table:</span><br><span class="line">ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line"># For each column:</span><br><span class="line">ALTER TABLE table_name CHANGE column_name column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line"># (Don’t blindly copy-paste this! The exact statement depends on the column type, maximum length, and other properties. The above line is just an example for a `VARCHAR` column.)</span><br></pre></td></tr></table></figure></li></ol></blockquote><ol start="2"><li>Check the maximum length of columns and index keys自行检查最大长度</li><li>Modify connection, client, and server character sets<br>老规矩修改cnf<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-client-handshake = FALSE</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure></li></ol><p>都是utf8mb4，</p><ol start="4"><li>重启。</li><li>再去检查一下数据库的编码，就没问题了。</li></ol><blockquote><p>吐槽：baidu is a shit！the same as 闭眼睛转发的人</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;小程序准备上线了，为了保证稳定性和数据库的安全准备从sqlite迁移到mysql，结果我就日了狗了。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现象：mysql中文字段报错：比如：&lt;code&gt;Incorrect string value: 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo自动发布部署同步脚本</title>
    <link href="http://ranxb.cn/2019/04/20/hexoautodeploy/"/>
    <id>http://ranxb.cn/2019/04/20/hexoautodeploy/</id>
    <published>2019-04-19T18:21:01.000Z</published>
    <updated>2019-04-19T18:21:01.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo自动发布脚本"><a href="#hexo自动发布脚本" class="headerlink" title="hexo自动发布脚本"></a>hexo自动发布脚本</h1><blockquote><p>自动编译上传GitHub服务器，同时让自己的服务其同步的python脚本</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_cmds</span><span class="params">(ip, name, pwd, cmd)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ssh = paramiko.SSHClient()</span><br><span class="line">        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">        ssh.connect(ip, <span class="number">22</span>, name, pwd, timeout=<span class="number">5</span>)</span><br><span class="line">        print(<span class="string">'连接成功'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> cmd:</span><br><span class="line">            print(m)</span><br><span class="line">            stdin, stdout, stderr = ssh.exec_command(m)</span><br><span class="line">            out = stdout.readlines()</span><br><span class="line">            <span class="keyword">for</span> o <span class="keyword">in</span> out:</span><br><span class="line">                print(o)</span><br><span class="line">        print(<span class="string">'运行成功'</span>)</span><br><span class="line">        ssh.close()</span><br><span class="line">        print(<span class="string">'关闭连接'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">        print(error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ip = <span class="string">"ip"</span> <span class="comment"># <span class="doctag">TODO:</span></span></span><br><span class="line">    name = <span class="string">"name"</span> <span class="comment"># <span class="doctag">TODO:</span></span></span><br><span class="line">    pwd = <span class="string">"pwd"</span> <span class="comment"># <span class="doctag">TODO:</span></span></span><br><span class="line">    cmd_local = <span class="string">"cd ~/Documents/blog;hexo g -d"</span></span><br><span class="line">    cmd_host = [<span class="string">"cd /data/ranxuebin/;git pull;"</span>]</span><br><span class="line">    os.system(cmd_local)</span><br><span class="line">    a = threading.Thread(target=execute_cmds, args=(ip, name, pwd, cmd_host))</span><br><span class="line">    a.start()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo自动发布脚本&quot;&gt;&lt;a href=&quot;#hexo自动发布脚本&quot; class=&quot;headerlink&quot; title=&quot;hexo自动发布脚本&quot;&gt;&lt;/a&gt;hexo自动发布脚本&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;自动编译上传GitHub服务器，同时让自己的服务其
      
    
    </summary>
    
      <category term="hexo" scheme="http://ranxb.cn/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>HexoClient可视化</title>
    <link href="http://ranxb.cn/2019/04/19/hexoclienttest/"/>
    <id>http://ranxb.cn/2019/04/19/hexoclienttest/</id>
    <published>2019-04-19T07:20:41.000Z</published>
    <updated>2019-04-19T07:20:48.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这是一个测试图形化文章的管理工具"><a href="#这是一个测试图形化文章的管理工具" class="headerlink" title="这是一个测试图形化文章的管理工具"></a>这是一个测试图形化文章的管理工具</h1><blockquote><p>本来是想自己写一个hexo可视化后台管理的，结果发现了这个本地管理的一个小工具还不错。<br>发现了一个比较好用的hexo的可视化管理工具——hexoClient现在把它记下来。<br>但是是一个比较不太成熟的项目，比如不支持带密码的ssh-keygen的发布，因此我把密码取消了，可是目前还遇到的问题是不知道为什么提示发布成功但是没有鸡毛反应，<br>不过这样以来的话估计就可以经常更新bolg了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;这是一个测试图形化文章的管理工具&quot;&gt;&lt;a href=&quot;#这是一个测试图形化文章的管理工具&quot; class=&quot;headerlink&quot; title=&quot;这是一个测试图形化文章的管理工具&quot;&gt;&lt;/a&gt;这是一个测试图形化文章的管理工具&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本
      
    
    </summary>
    
      <category term="hexo" scheme="http://ranxb.cn/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>甘肃政务服务网证件办理自动查询</title>
    <link href="http://ranxb.cn/2018/07/06/%E7%94%98%E8%82%83%E6%94%BF%E5%8A%A1%E6%9C%8D%E5%8A%A1%E7%BD%91%E8%AF%81%E4%BB%B6%E5%8A%9E%E7%90%86%E8%87%AA%E5%8A%A8%E6%9F%A5%E8%AF%A2/"/>
    <id>http://ranxb.cn/2018/07/06/甘肃政务服务网证件办理自动查询/</id>
    <published>2018-07-06T11:07:45.000Z</published>
    <updated>2018-07-06T11:23:41.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="甘肃政务服务网证件办理自动查询"><a href="#甘肃政务服务网证件办理自动查询" class="headerlink" title="甘肃政务服务网证件办理自动查询"></a>甘肃政务服务网证件办理自动查询</h1><blockquote><p>办理护照和大通证的时候发现有个甘肃政务服务网可以查到办证的进度信息，因为着急要就随时盯着，所以写了个自动查询脚本，进度变化的时候会发邮件给我。</p></blockquote><p><a href="http://crj.gsgaw.gov.cn:7770/crj/crjmsjw/wsyy/ajax/bzjdquery.html" target="_blank" rel="noopener">甘肃政务信息网</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="a.png" alt title>                </div>                <div class="image-caption"></div>            </figure>  <p>效果如下：<br><img src="b.png" alt>  </p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(sub, text)</span>:</span></span><br><span class="line">    <span class="comment"># 第三方 SMTP 服务</span></span><br><span class="line">    mail_host = <span class="string">"smtp.lzu.edu.cn"</span>  <span class="comment"># 设置服务器</span></span><br><span class="line">    mail_user = <span class="string">"***"</span>  <span class="comment"># 用户名</span></span><br><span class="line">    mail_pass = <span class="string">"***"</span>  <span class="comment"># 口令</span></span><br><span class="line"></span><br><span class="line">    sender = <span class="string">'ranxb16@lzu.cn'</span></span><br><span class="line">    <span class="comment"># receivers = ['ranxuebin@ranxb.cn']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></span><br><span class="line">    receivers = <span class="string">','</span>.join([<span class="string">'ranxuebin@ranxb.cn'</span>])</span><br><span class="line">    message = MIMEText(text, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'From'</span>] = Header(<span class="string">"自动发送"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'To'</span>] = Header(<span class="string">"Rankin"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    subject = sub</span><br><span class="line">    message[<span class="string">'Subject'</span>] = Header(subject, <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        smtpObj = smtplib.SMTP()</span><br><span class="line">        smtpObj.connect(mail_host, <span class="number">25</span>)  <span class="comment"># 25 为 SMTP 端口号</span></span><br><span class="line">        smtpObj.login(mail_user, mail_pass)</span><br><span class="line">        smtpObj.sendmail(sender, receivers, message.as_string())</span><br><span class="line">        print(<span class="string">"邮件发送成功"</span>)</span><br><span class="line">    <span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">        print(<span class="string">"send mail error!"</span>)</span><br><span class="line"></span><br><span class="line">message = <span class="string">'Pass the first stage'</span></span><br><span class="line">loginurl = <span class="string">'http://crj.gsgaw.gov.cn:7770/crj/crjmsjw/wssb/ajax/bzjdcx'</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15"</span>,</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"application/json, text/javascript, */*; q=0.01"</span>,</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">'nj.gsaic.gov.cn'</span>,</span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">'zh-cn'</span>,</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'http://crj.gsgaw.gov.cn:7770/crj/crjmsjw/wsyy/ajax/bzjdquery.html'</span>,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"Origin"</span>: <span class="string">'http://crj.gsgaw.gov.cn:7770'</span>,</span><br><span class="line">    <span class="string">"DNT"</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">'keep-alive'</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">'sfzh'</span>: <span class="string">'632824199809070519'</span>,</span><br><span class="line">    <span class="string">'rylb'</span>: <span class="string">'R'</span></span><br><span class="line">&#125;</span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = <span class="string">""</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        content = session.post(loginurl, headers=headers, data=payload)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"login error!"</span>)</span><br><span class="line"></span><br><span class="line">    tagert = json.loads(content.text)</span><br><span class="line"></span><br><span class="line">    res = tagert[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'fullbzjd'</span>]</span><br><span class="line">    print(time.strftime(<span class="string">"%a %b %d %H:%M:%S %Y"</span>, time.localtime()) + <span class="string">"    "</span> + res)</span><br><span class="line">    <span class="keyword">if</span> message != res:</span><br><span class="line">        send_mail(<span class="string">"赴台证"</span>, res)</span><br><span class="line">        message = res</span><br><span class="line">    time.sleep(<span class="number">120</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;甘肃政务服务网证件办理自动查询&quot;&gt;&lt;a href=&quot;#甘肃政务服务网证件办理自动查询&quot; class=&quot;headerlink&quot; title=&quot;甘肃政务服务网证件办理自动查询&quot;&gt;&lt;/a&gt;甘肃政务服务网证件办理自动查询&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;办理护照和
      
    
    </summary>
    
      <category term="脚本" scheme="http://ranxb.cn/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="脚本" scheme="http://ranxb.cn/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="办证进度" scheme="http://ranxb.cn/tags/%E5%8A%9E%E8%AF%81%E8%BF%9B%E5%BA%A6/"/>
    
      <category term="甘肃政务服务网" scheme="http://ranxb.cn/tags/%E7%94%98%E8%82%83%E6%94%BF%E5%8A%A1%E6%9C%8D%E5%8A%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS下SD卡烧录镜像</title>
    <link href="http://ranxb.cn/2018/06/05/Mac-OS%E4%B8%8BSD%E5%8D%A1%E7%83%A7%E5%BD%95%E9%95%9C%E5%83%8F/"/>
    <id>http://ranxb.cn/2018/06/05/Mac-OS下SD卡烧录镜像/</id>
    <published>2018-06-05T03:21:57.000Z</published>
    <updated>2018-06-05T03:32:46.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-OS下SD卡烧录镜像"><a href="#Mac-OS下SD卡烧录镜像" class="headerlink" title="Mac OS下SD卡烧录镜像"></a>Mac OS下SD卡烧录镜像</h1><blockquote><p>经常换镜像，做个笔记。</p></blockquote><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>打开磁盘管理，选择SD卡，全部抹除，格式为FAT，不在多说。</p><h2 id="卸载分区"><a href="#卸载分区" class="headerlink" title="卸载分区"></a>卸载分区</h2><ul><li>打开命令行<br><code>diskutil list</code> 查看设备列表</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Rankin-Mac:~ Rankin$ diskutil list</span><br><span class="line">/dev/disk0 (internal):</span><br><span class="line"><span class="meta">   #</span><span class="bash">:                       TYPE NAME                    SIZE       IDENTIFIER</span></span><br><span class="line">   0:      GUID_partition_scheme                         500.3 GB   disk0</span><br><span class="line">   1:                        EFI EFI                     314.6 MB   disk0s1</span><br><span class="line">   2:                 Apple_APFS Container disk1         500.0 GB   disk0s2</span><br><span class="line"></span><br><span class="line">/dev/disk1 (synthesized):</span><br><span class="line"><span class="meta">   #</span><span class="bash">:                       TYPE NAME                    SIZE       IDENTIFIER</span></span><br><span class="line">   0:      APFS Container Scheme -                      +500.0 GB   disk1</span><br><span class="line">                                 Physical Store disk0s2</span><br><span class="line">   1:                APFS Volume Macintosh HD            215.0 GB   disk1s1</span><br><span class="line">   2:                APFS Volume Preboot                 24.2 MB    disk1s2</span><br><span class="line">   3:                APFS Volume Recovery                517.8 MB   disk1s3</span><br><span class="line">   4:                APFS Volume VM                      3.2 GB     disk1s4</span><br><span class="line"></span><br><span class="line">/dev/disk2 (external, physical):</span><br><span class="line"><span class="meta">   #</span><span class="bash">:                       TYPE NAME                    SIZE       IDENTIFIER</span></span><br><span class="line">   0:     FDisk_partition_scheme                        *7.9 GB     disk2</span><br><span class="line">   1:                 DOS_FAT_32 UNTITLED                7.9 GB     disk2s1</span><br><span class="line"></span><br><span class="line">/dev/disk3 (disk image):</span><br><span class="line"><span class="meta">   #</span><span class="bash">:                       TYPE NAME                    SIZE       IDENTIFIER</span></span><br><span class="line">   0:      GUID_partition_scheme                        +314.8 GB   disk3</span><br><span class="line">   1:                        EFI EFI                     209.7 MB   disk3s1</span><br><span class="line">   2:                  Apple_HFS 时间机器备份            314.5 GB   disk3s2</span><br></pre></td></tr></table></figure><p>这样的就卸载disk2的所有分区，例如disk2s1，有多的都要卸载。</p><ul><li>命令：<code>diskutil unmount /dev/disk2s1</code></li></ul><h2 id="烧录"><a href="#烧录" class="headerlink" title="烧录"></a>烧录</h2><p>前提是准备好你的镜像iso文件。</p><ul><li>命令：<code>sudo dd bs=4m if=ubuntu-16.04.4-lxqt-aarch64-raspberrypi3b-raspberrypi3b-plus-20180428-chainsx.img of=/dev/rdisk2</code></li><li>注意，目标磁盘为原始磁盘rdisk*，绝对不要把数字写错。</li></ul><p>完成后会提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">750+0 records in  </span><br><span class="line">750+0 records out</span><br><span class="line">3145728000 bytes transferred in 279.701624 secs (11246728 bytes/sec)</span><br></pre></td></tr></table></figure><h2 id="卸载磁盘"><a href="#卸载磁盘" class="headerlink" title="卸载磁盘"></a>卸载磁盘</h2><ul><li>命令：<code>diskutil unmountDisk /dev/disk2</code></li><li>完成</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac-OS下SD卡烧录镜像&quot;&gt;&lt;a href=&quot;#Mac-OS下SD卡烧录镜像&quot; class=&quot;headerlink&quot; title=&quot;Mac OS下SD卡烧录镜像&quot;&gt;&lt;/a&gt;Mac OS下SD卡烧录镜像&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;经常换镜像，做个笔
      
    
    </summary>
    
      <category term="烧录" scheme="http://ranxb.cn/categories/%E7%83%A7%E5%BD%95/"/>
    
    
      <category term="烧录" scheme="http://ranxb.cn/tags/%E7%83%A7%E5%BD%95/"/>
    
      <category term="SD卡" scheme="http://ranxb.cn/tags/SD%E5%8D%A1/"/>
    
      <category term="Mac" scheme="http://ranxb.cn/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>台湾科技大学自动查询审核结果的脚本</title>
    <link href="http://ranxb.cn/2018/05/07/%E5%8F%B0%E6%B9%BE%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6%E8%87%AA%E5%8A%A8%E6%9F%A5%E8%AF%A2%E5%AE%A1%E6%A0%B8%E7%BB%93%E6%9E%9C%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
    <id>http://ranxb.cn/2018/05/07/台湾科技大学自动查询审核结果的脚本/</id>
    <published>2018-05-07T07:49:45.000Z</published>
    <updated>2018-05-07T07:55:00.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="台湾科技大学自动查询审核结果的脚本"><a href="#台湾科技大学自动查询审核结果的脚本" class="headerlink" title="台湾科技大学自动查询审核结果的脚本"></a>台湾科技大学自动查询审核结果的脚本</h1><blockquote><pre><code>要去交流了，天天随时随地看结果太累了，写了个简单的脚本，如果发生变动的话会发邮件给我，代码如下。  </code></pre></blockquote><p>Github地址: <a href="https://github.com/ranxuebin/NTUST_Exchange-Program-Auto-Chack-Result" target="_blank" rel="noopener">https://github.com/ranxuebin/NTUST_Exchange-Program-Auto-Chack-Result</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="a.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    loginurl = <span class="string">'http://stu88.ntust.edu.tw/inboundchina/stu/login.do'</span></span><br><span class="line">    homeurl = <span class="string">"http://stu88.ntust.edu.tw/inboundchina/stu/review.result"</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1 Safari/605.1.15"</span>,</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">        <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">        <span class="string">"Host"</span>: <span class="string">'stu88.ntust.edu.tw'</span>,</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">'zh-cn'</span>,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'http://stu88.ntust.edu.tw/inboundchina/stu'</span>,</span><br><span class="line">        <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"Origin"</span>: <span class="string">'http://jwk.lzu.edu.cn'</span>,</span><br><span class="line">        <span class="string">"DNT"</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">"Connection"</span>: <span class="string">'keep-alive'</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    session = requests.Session()</span><br><span class="line"></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">'email'</span>: <span class="string">'ranxuebin@ranxb.cn'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'*******'</span>,</span><br><span class="line">        <span class="string">'captcha'</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(sub, text)</span>:</span></span><br><span class="line">        <span class="comment"># 第三方 SMTP 服务</span></span><br><span class="line">        mail_host = <span class="string">"smtp.lzu.edu.cn"</span>  <span class="comment"># 设置服务器</span></span><br><span class="line">        mail_user = <span class="string">"*****"</span>  <span class="comment"># 用户名</span></span><br><span class="line">        mail_pass = <span class="string">"*****"</span>  <span class="comment"># 口令</span></span><br><span class="line"></span><br><span class="line">        sender = <span class="string">'ranxb16@lzu.cn'</span></span><br><span class="line">        <span class="comment"># receivers = ['ranxuebin@ranxb.cn']  # 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span></span><br><span class="line">        receivers = <span class="string">','</span>.join([<span class="string">'ranxuebin@ranxb.cn'</span>])</span><br><span class="line">        message = MIMEText(text, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        message[<span class="string">'From'</span>] = Header(<span class="string">"自动发送"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        message[<span class="string">'To'</span>] = Header(<span class="string">"Rankin"</span>, <span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">        subject = sub</span><br><span class="line">        message[<span class="string">'Subject'</span>] = Header(subject, <span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            smtpObj = smtplib.SMTP()</span><br><span class="line">            smtpObj.connect(mail_host, <span class="number">25</span>)  <span class="comment"># 25 为 SMTP 端口号</span></span><br><span class="line">            smtpObj.login(mail_user, mail_pass)</span><br><span class="line">            smtpObj.sendmail(sender, receivers, message.as_string())</span><br><span class="line">            print(<span class="string">"邮件发送成功"</span>)</span><br><span class="line">        <span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">            print(<span class="string">"send mail error!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response_login = session.post(loginurl, headers=headers, data=payload)</span><br><span class="line">        response_home = session.get(homeurl, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"login error!"</span>)</span><br><span class="line">    result = BeautifulSoup(response_home.text, <span class="string">"html.parser"</span>)</span><br><span class="line">    result = result.find(class_=<span class="string">"alert alert-info"</span>)</span><br><span class="line">    print(time.strftime(<span class="string">"%a %b %d %H:%M:%S %Y"</span>, time.localtime()) + <span class="string">"    "</span> + result.span.string)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result.span.string != <span class="string">'Pass the first stage'</span>:</span><br><span class="line">        send_mail(<span class="string">"台科大信息"</span>, result.span.string)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">600</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;台湾科技大学自动查询审核结果的脚本&quot;&gt;&lt;a href=&quot;#台湾科技大学自动查询审核结果的脚本&quot; class=&quot;headerlink&quot; title=&quot;台湾科技大学自动查询审核结果的脚本&quot;&gt;&lt;/a&gt;台湾科技大学自动查询审核结果的脚本&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="脚本" scheme="http://ranxb.cn/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="脚本" scheme="http://ranxb.cn/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="台科" scheme="http://ranxb.cn/tags/%E5%8F%B0%E7%A7%91/"/>
    
  </entry>
  
  <entry>
    <title>无显示器条件下查询树莓派IP的方法</title>
    <link href="http://ranxb.cn/2018/02/14/%E6%97%A0%E6%98%BE%E7%A4%BA%E5%99%A8%E6%9D%A1%E4%BB%B6%E4%B8%8B%E6%9F%A5%E8%AF%A2%E6%A0%91%E8%8E%93%E6%B4%BEIP%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://ranxb.cn/2018/02/14/无显示器条件下查询树莓派IP的方法/</id>
    <published>2018-02-14T04:18:09.000Z</published>
    <updated>2018-02-14T04:19:48.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无显示器条件下查询树莓派IP的方法"><a href="#无显示器条件下查询树莓派IP的方法" class="headerlink" title="无显示器条件下查询树莓派IP的方法"></a>无显示器条件下查询树莓派IP的方法</h1><blockquote><p>方法都根据树莓派的网卡物理地址为<code>b8:27:eb:</code>开头    。因此有以下自动化方法</p></blockquote><h2 id="Mac下打开网络实用工具"><a href="#Mac下打开网络实用工具" class="headerlink" title="Mac下打开网络实用工具"></a>Mac下打开网络实用工具</h2><p>直接查询Netstat下的路由表找到树莓派的物理地址对应的就是树莓派的IP地址。</p><h2 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h2><blockquote><p>整个代码逻辑为依次pingIP地址，之后通过arp映射找到对应的物理地址，取到对应的IP。</p></blockquote><p>代码如下</p><pre><code>clearecho &quot;程序运行中...&quot;ipLine=&quot;`ifconfig | grep &quot;inet 192.168&quot; `&quot;preIp=${ipLine:5:11}echo &quot;程序默认将在$preIp 2 - $preIp 255范围内进行扫描&quot;echo &quot;但这将花费较多时间，请问是否进行手动设置？（y/n)&quot;read choiceif test $choice = &quot;y&quot;    then        echo -n &quot;请输入起始位置(2-255):&quot;        read i        echo -n &quot;请输入结束位置($i-255):&quot;        read j        echo &quot;下面将对 $i 到 $j 范围进行扫描&quot;    else        i=2        j=255        echo &quot;下面将直接对2-255整个范围进行扫描&quot;fiwhile test $i -ne $jdo    echo &quot;正在检测ip的连接情况，请耐心等待&quot;    ip=$preIp$i    echo &quot;正在ping端口$ip ...&quot;    &quot;`ping -t 1 -q $ip `&quot;    let i=i+1    cleardoneclearecho &quot;所有ip检测完毕，正在计算结果...&quot;result=&quot;`arp -a | grep &quot;b8:27:eb:&quot; ` &quot;resultIp=${result:3:14}resultMac=${result:19:17}clearecho &quot;已经得到结果：&quot;echo &quot;您的树莓派Mac地址为:$resultMac&quot;echo &quot;    当前连接的IP为:$resultIp&quot;echoecho &quot;程序结束&quot;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;无显示器条件下查询树莓派IP的方法&quot;&gt;&lt;a href=&quot;#无显示器条件下查询树莓派IP的方法&quot; class=&quot;headerlink&quot; title=&quot;无显示器条件下查询树莓派IP的方法&quot;&gt;&lt;/a&gt;无显示器条件下查询树莓派IP的方法&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="树莓派" scheme="http://ranxb.cn/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="http://ranxb.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Unix" scheme="http://ranxb.cn/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu上启动ftp服务</title>
    <link href="http://ranxb.cn/2018/02/07/Ubuntu%E4%B8%8A%E5%90%AF%E5%8A%A8ftp%E6%9C%8D%E5%8A%A1/"/>
    <id>http://ranxb.cn/2018/02/07/Ubuntu上启动ftp服务/</id>
    <published>2018-02-07T13:13:49.000Z</published>
    <updated>2018-02-07T13:16:20.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu上启动ftp服务"><a href="#Ubuntu上启动ftp服务" class="headerlink" title="Ubuntu上启动ftp服务"></a>Ubuntu上启动ftp服务</h1><h2 id="安装并启动VSFTPD"><a href="#安装并启动VSFTPD" class="headerlink" title="安装并启动VSFTPD"></a>安装并启动VSFTPD</h2><ul><li>安装VSFTPD<br><code>sudo apt-get install vsftpd -y</code></li><li>启动VSFTPD(会自动启动若未启动)<br><code>sudo systemctl start vsftpd.service</code></li><li>检测端口，判断是否启动。<br><code>sudo netstat -nltp | grep</code> </li></ul><h2 id="配置用户访问目录"><a href="#配置用户访问目录" class="headerlink" title="配置用户访问目录"></a>配置用户访问目录</h2><ul><li>新建主目录</li><li>新建用户并设置密码<br><code>sudo useradd -d /home/uftp -s /bin/bash uftp</code><br><code>sudo passwd uftp</code><br><code>sudo rm /etc/pam.d/vsftpd</code>(这里删除该配置文件，因为会导致使用用户名登录FTP失败)</li><li>限制用户只能通过FTP访问<br><code>sudo usermod -s /sbin/nologin uftp</code></li><li><p>修改VSFTPD配置<br><code>sudo chmod a+w /etc/vsftpd.conf</code><br>下面修改<code>/etc/vsftpd.conf</code>文件中的配置（添加到最下面）</p><pre><code># 限制用户对主目录以外目录访问chroot_local_user=YES# 指定一个 userlist 存放允许访问 ftp 的用户列表userlist_deny=NOuserlist_enable=YES# 记录允许访问 ftp 用户列表userlist_file=/etc/vsftpd.user_list# 不配置可能导致莫名的530问题seccomp_sandbox=NO# 允许文件上传write_enable=YES# 使用utf8编码utf8_filesystem=YES</code></pre><p>新建文件<code>/etc/vsftpd.user_list</code>用于存放允许访问FTP的用户<br><code>sudo touch /etc/vsftpd.user_list</code><br><code>sudo chmod a+w /etc/vsftpd.user_list</code><br>并修改，加入刚刚创建的用户</p></li><li><p>设置访问限权<br>设置主目录访问权限（只读）：<code>sudo chmod a-w /home/uftp</code><br>设置公共目录，设置可读写：<code>sudo mkdir /home/uftp/public &amp;&amp; sudo chmod 777 -R /home/uftp/public</code><br>重启VSFTPD服务：<code>sudo systemctl restart vsftpd.service</code></p></li></ul><h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu上启动ftp服务&quot;&gt;&lt;a href=&quot;#Ubuntu上启动ftp服务&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu上启动ftp服务&quot;&gt;&lt;/a&gt;Ubuntu上启动ftp服务&lt;/h1&gt;&lt;h2 id=&quot;安装并启动VSFTPD&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Linux" scheme="http://ranxb.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ranxb.cn/tags/Linux/"/>
    
      <category term="FTP" scheme="http://ranxb.cn/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>Linux的用户及用户组</title>
    <link href="http://ranxb.cn/2018/02/07/Linux%E7%9A%84%E7%94%A8%E6%88%B7%E5%8F%8A%E7%94%A8%E6%88%B7%E7%BB%84/"/>
    <id>http://ranxb.cn/2018/02/07/Linux的用户及用户组/</id>
    <published>2018-02-07T13:12:41.000Z</published>
    <updated>2018-02-07T13:18:16.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux的用户及用户组"><a href="#Linux的用户及用户组" class="headerlink" title="Linux的用户及用户组"></a>Linux的用户及用户组</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li><code>/etc/group</code>  组信息配置文件</li><li><code>/etc/passwd</code> 用户信息配置文件</li><li><code>/etc/shadow</code> 用户密码配置文件</li><li><code>/etc/gshadow</code> 组密码配置文件</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="a.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure>   <p><img src="b.jpg" alt></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="组操作"><a href="#组操作" class="headerlink" title="组操作"></a>组操作</h3><p><code>groupadd NEWGROUP</code>添加一个组<br><code>groupadd -g 888 NEWGROUP</code>添加一个组并指定UID<br><code>grouddel NEWGROUP</code>删除一个组。<br><code>groupmod -n NEWGROUP OLDGROUP</code>更改组名<br><code>groupmod -g 888 NEWGROUP</code>更改组UID</p><h3 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h3><p><code>useradd -g GROUP USER</code>添加一个指定用户组的用户<br><code>useradd -d /home/xxx USER</code>添加一个指定目录的的用户<br><code>userdel USER</code>删除一个用户<br><code>userdel -r USER</code>同时删除用户主目录<br><code>usermod -l NEWNAME USER</code>更改用户名<br><code>usermod -c BEIZHU USER</code>加备注<br><code>usermod -d /home/yyy UESR</code>改用户主目录<br><code>usermod -g GROUP USER</code>改组</p><blockquote><p>在<code>/etc/</code>下创建<code>nologin</code>文件其他用户均不能登录</p></blockquote><h2 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h2><h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><blockquote><p>主要组和附属组</p></blockquote><p><code>gpasswd -a USER GROUP,GROUP2</code>添加附属组<br><code>newgrp GROUP</code>切换用户组,此时可能需要组密码<br><code>gpasswd -d USER GROUP</code>删除附属组<br><code>useradd -g 主要组 -G 附属组，附属组 USER</code>新建时指定用户组<br><code>gpasswd GROUP</code>修改组密码</p><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p><code>passwd -l USER</code>锁定账户<br><code>passwd -u USER</code>解锁账户<br><code>passwd -d USER</code>清除密码</p><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><p><code>su USER</code> 切换账户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux的用户及用户组&quot;&gt;&lt;a href=&quot;#Linux的用户及用户组&quot; class=&quot;headerlink&quot; title=&quot;Linux的用户及用户组&quot;&gt;&lt;/a&gt;Linux的用户及用户组&lt;/h1&gt;&lt;h2 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; cla
      
    
    </summary>
    
      <category term="Linux" scheme="http://ranxb.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ranxb.cn/tags/Linux/"/>
    
      <category term="用户" scheme="http://ranxb.cn/tags/%E7%94%A8%E6%88%B7/"/>
    
  </entry>
  
  <entry>
    <title>数据结构知识框架</title>
    <link href="http://ranxb.cn/2018/01/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86%E6%A1%86%E6%9E%B6/"/>
    <id>http://ranxb.cn/2018/01/11/数据结构知识框架/</id>
    <published>2018-01-11T01:16:54.000Z</published>
    <updated>2018-01-11T16:03:53.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构知识框架"><a href="#数据结构知识框架" class="headerlink" title="数据结构知识框架"></a>数据结构知识框架</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>第一方面：基本概念<br>1、数据结构研究方面（研究内容）<br>主要体现三个方面：</p><ul><li>数据的逻辑关系</li><li>储存关系</li><li>运算关系</li><li>还讨论算法的效率问题，分类问题等。 </li></ul><p>2、数据结构的逻辑结构<br><strong>逻辑关系</strong>：自然状态下数据元素之间的一种联系（关联方式或邻接关系，从逻辑上观察数据，与计算机无关）。<br><strong>逻辑结构</strong>：对数据元素之间关系的描述B=(k，r)其中，k：数据元素的有穷集合（有限元素构成），r：k上关系的有穷集合，其中每个关系r都是从k到k的关系。<br><strong>逻辑结构的分类</strong>：线性结构和非线性结构（树形结构、图形结构（网状结构））。<br><strong>关于集合类型</strong>：元素之间除同属一个集合外别无其他类型<br>3、数据结构的<strong>存储结构</strong><br><strong>存储关系</strong>：逻辑结构在计算机存储器中实现，它依赖于计算机。具体说数据在存储器中的关联方式，也成物理结构，物理关系等。 </p><ul><li>顺序结构  </li><li>链接结构  </li><li>索引结构  </li><li>散列（hash）结构 </li></ul><p>4、数据结构评价标准<br>主要标准： </p><ul><li>作为问题的参数的函数来计算<strong>存储需要量</strong>  </li><li>作为问题的参数的函数来计算<strong>时间效率</strong>  </li><li>还需要考虑其他因素  </li></ul><h2 id="第二章：算法（只有一个层面）"><a href="#第二章：算法（只有一个层面）" class="headerlink" title="第二章：算法（只有一个层面）"></a>第二章：算法（只有一个层面）</h2><p>1、算法的评价标准<br>好算法要达到以下目标：  </p><ul><li>正确性（满足具体问题的要求）  </li><li>易读性（交流与他人阅读，其次是机器执行）  </li><li>高效性（效率与存储量的需求，达到所需的时空性能）  </li><li>健壮性（适应环境变化，有非法输入时，能做出相应的处理或反映）  </li></ul><p>2、算法的描述方法  </p><ul><li>计算机程序设计语言  </li><li>自然语言  </li><li>PDL语言（伪码语言、可运行于“抽象计算机”，虚拟机）  </li><li>流程图  </li></ul><h2 id="第三章：线性表（只有第三个要求）"><a href="#第三章：线性表（只有第三个要求）" class="headerlink" title="第三章：线性表（只有第三个要求）"></a>第三章：线性表（只有第三个要求）</h2><p>1、<strong>线性表</strong>：一个线性表是n≥0个数据元素a1，a2，……，an的有限序列，序列中除第一个最后一个以外，每个元素都是有且仅有一个直接前驱和直接后继。<br>2、<strong>链表</strong>：通过指针联系起来的结点的整体（集合）。<br>3、<strong>静态链表</strong>：以整形变量的值作为存储连接指针值（即地址）联系起来的结点的整体。（指针本质整形值）<br>4、<strong>表头结点</strong>：增加一个附加结点，放置于链表的最前面，也称表头结点，且该节点不用存储数据元素。作用和目的（简化算法）。<br>5、<strong>存储密度</strong>：结点数据本身所占的存储量和整个结点结构所占的存储量之比。<br>存储密度 = （结点数据本身所占的存储量）/（结点结构所占的存储总量）  </p><pre><code>基于链表的插入删除 </code></pre><h2 id="第四章：栈和队列（只有第三层）"><a href="#第四章：栈和队列（只有第三层）" class="headerlink" title="第四章：栈和队列（只有第三层）"></a>第四章：栈和队列（只有第三层）</h2><p>1、<strong>栈</strong>：栈在计算机具体应用中，是一个特定的存储区，一端固定，一端浮动。<br>栈是一个下限为常数，上限可变化的（或者反之），也成为堆栈或堆阵。可变化一端为栈顶，不可变化一端为栈底<br>2、<strong>栈与线性表的异同</strong>：栈的插入、删除至能在一端进行，不能在任意点，栈是受限的线性表。<br>3、<strong>队列</strong>：队列是一个上限和下限只能增加和不能减少的向量（或反之），队首：取出元素的一端。队尾：加入元素的一端。<br>4、<strong>队列与线性表的异同</strong>：受限的线性表，删除和插入操作只能在特定位置。<br>5、<strong>假溢出（待定）</strong>：多栈共存时，有点栈已满，有的还没有满。存储区还没有满,但队列或栈却发生了溢出,我们把这种现象称为”假溢出”。  </p><blockquote><p>第三层次：循环队列的出入队。</p></blockquote><pre><code>循环队列的出入队 (注意！队首指向队头元素的前一个地址，队尾指向队屁股最后一个元素)入队： PROC REDUI(VAR CQ: ARRAY[M..N]OF DATATYPE;FRONT,REAR,X:INTERG) BEGIN     REAR&lt;-REAR+1    IF REAR=N+1        THEN REAR&lt;-M    IF REAR=FRONT        THEN PRINT&quot;CQ FULL&quot;&quot;        ELSE CQ[REAR]&lt;-XEND出队：PROC CHUDUI(VAR CQ:ARRAY[M...N]OF DATATYPE;FRONT,REAR,X:INTEGER)BEGIN    IF    FRONT=REAR        THEN    PRINT&quot;CQ EMPTY&quot;        ELSE    IF    FRONT = N                    THEN FRONT = M                    ELSE FRONT &lt;- FRONT+1                X &lt;- CQ[FRONT]END</code></pre><h2 id="第五章：串（只有第一层面）"><a href="#第五章：串（只有第一层面）" class="headerlink" title="第五章：串（只有第一层面）"></a>第五章：串（只有第一层面）</h2><p>1、<strong>串</strong>：一个由零个或多个字符组成的有穷序列称为串，简记A=a1a2……an。<br>2、<strong>串的模式匹配</strong>：假设有两个串P和S：<br>P=p1p2……pm    S=s1s2……sn 其中（0＜m＜n）通常m&lt;&lt;n<br>在S中找出一个与P相同的子串，即串的定位。<br>通常把S称为目标，把P称为模式，把从目标S中查找模式P的过程称为串的模式匹配。  </p><h2 id="第六章：数组和广义表（二）"><a href="#第六章：数组和广义表（二）" class="headerlink" title="第六章：数组和广义表（二）"></a>第六章：数组和广义表（二）</h2><p>1、<strong>数组</strong>：一位数组是个向量，他的每个元素是该结构中不可分割的最小单位；n(n&gt;1)维数组是个向量，他的每个元素是n-1维数组，且具有相同的下限和上限。<br>2、<strong>稀疏数组</strong>：在一个数组中和某一元素比较而言，不相同的元素很少时，我们称此数组为稀疏数组。<br>3、<strong>稀疏矩阵</strong>：是稀疏数组的典例。与稀疏矩阵的差别：元素分布是否有规律。<br>4、<strong>广义表</strong>：广义表是零个或多个原子（他是所要描述的某种数据类型的对象，是一个确定的概念）或子表所构成的有限序列，简称表。</p><blockquote><p>第二层次<br>稀疏矩阵的两个存储方法：三元组（顺序存储）、十字链表</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="a.png" alt title>                </div>                <div class="image-caption"></div>            </figure>  <p>三元组的缺陷</p><ul><li>不利于矩阵元素的变化：非零到零的删除、零到非零的添加</li></ul><h2 id="第七章：树形结构（二、三）"><a href="#第七章：树形结构（二、三）" class="headerlink" title="第七章：树形结构（二、三）"></a>第七章：树形结构（二、三）</h2><p>1、<strong>树</strong>：是满足以下性质的有限个结点组成的非空集合  </p><ul><li>T中有且只有一个称为根的结点。  </li><li>除根节点以外，其余节点分为m(m&gt;0)个不相交的集合T1，T2……Tm，其中每个Ti都是数，而却都称为T的子树。  </li></ul><p>2、<strong>二叉树</strong>：二叉树T是满足如下性质的结点的有限集合： </p><ul><li>T是空集。 </li><li>或者它包含一个根节点且其余结点分为两个不相交的集合，并分别被称为左子树和右子树，且左右子树都为二叉树。  </li></ul><p>3、<strong>遍历</strong>：对于给定数据结构，系统的访问该结构中的每个结点，且每个结点仅被访问一次的操作过程成为遍历。（会改字）<br>4、<strong>二叉树的遍历规则</strong>：  </p><ul><li>层次遍历：从上到下从左到右，布拉布拉布拉～</li><li>深度策略：先根遍历、中根遍历、后根遍历。 </li></ul><p>5、<strong>二叉排序树</strong>：二叉排序树或空二叉树，或者是满足以下要求的二叉树。</p><ul><li>若是它的左子树非空，或者左子树上所有结点的值均小于等于根节点的值。  </li><li>若它右子树非空，则右子树上所有结点的值均大于等于根节点的值。  </li><li>且左右子树都为二叉排序树。  </li></ul><p>6、<strong>线索</strong>：将二叉树的空指针利用起来，用于表示某线性关系下前驱或后即的，这种指针称为线索。<br>7、<strong>线索树</strong>：带线索的二叉树简称为线索树。  </p><p>8、<strong>霍夫曼树（最优二叉树）</strong>：按霍夫曼算法构造具有最小加权路径长度的二叉树。<br>9、<strong>线索化</strong>：给二叉树加线索的过程。  </p><blockquote><p>第二层次：  </p><ul><li>树、森林、二叉树相互转换  </li><li>二叉树的前中后遍历的方法  </li><li>二叉树加线索  </li><li>霍夫曼树的构造和编码  </li><li>二叉排序树的构造  </li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">二叉树的先序遍历</span><br><span class="line">PROC XIANXUBIANLI (VAR T:BINARY TREE)</span><br><span class="line">BEGIN</span><br><span class="line">IF T!=NULL</span><br><span class="line">THEN[PRINT&quot;T-&gt;DATA&quot;</span><br><span class="line">CALL XIANXUBIANLI(T-&gt;LSON)</span><br><span class="line">CALL XIANXUBIANLI(T-&gt;RSON)]</span><br><span class="line">END</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">二叉树的中序遍历</span><br><span class="line">PROC XIANXUBIANLI (VAR T:BINARY TREE)</span><br><span class="line">BEGIN</span><br><span class="line">IF T!=NULL</span><br><span class="line">THEN[CALL XIANXUBIANLI(T-&gt;LSON)</span><br><span class="line">PRINT&quot;T-&gt;DATA&quot;</span><br><span class="line">CALL XIANXUBIANLI(T-&gt;RSON)]</span><br><span class="line"></span><br><span class="line">END</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">二叉树的后序遍历</span><br><span class="line">PROC XIANXUBIANLI (VAR T:BINARY TREE)</span><br><span class="line">BEGIN</span><br><span class="line">IF T!=NULL</span><br><span class="line">THEN[CALL XIANXUBIANLI(T-&gt;LSON)</span><br><span class="line">CALL XIANXUBIANLI(T-&gt;RSON)</span><br><span class="line">PRINT&quot;T-&gt;DATA&quot;]</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p><strong>树到二叉树的转换：</strong>  </p><ul><li>加线：加横线</li><li>抹线：抹掉可以抹掉的所有右孩子之间的线<br><img src="b.png" alt></li></ul><p><strong>二叉树转到树：</strong>  </p><ul><li>加线：1.是父节点的左孩子。2.把父节点和他的右孩子和右孩子的右孩子和。。。连起来。</li><li>抹线：抹去所有节点和右孩子之间的线<br><img src="c.png" alt>    </li></ul><p><strong>森林转化为二叉树</strong></p><ul><li>把每个树转化为二叉树</li><li>二叉树的连接：依据森林次序，后一棵二叉树是前一棵二叉树根节点的右子树<br><img src="d.png" alt></li></ul><p><strong>二叉树转换成森林</strong></p><ul><li>抹线：把节点的右子树都拿出来</li><li>还原：把每个二叉树变成树<br><img src="e.png" alt></li></ul><p><strong>线索化</strong></p><ul><li>左孩子指向直接前驱</li><li>右孩子指向直接后驱</li><li>标志位0表示指向孩子，1表示指向线索</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="f.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>构造二叉树</strong></p><ol><li>节点是否为空，为空则插入</li><li>若小于，执行递归插入左孩子节点，到1.</li><li>若大于，执行递归插入右孩子节点，到1.</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="g.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>霍夫曼树（最优二叉树）</strong>  </p><ul><li>给定一组权值集合{w1, w2, …, wn}.</li><li>将F={T1, T2, …, Tn}按根结点的值由小到大进行排序。</li><li>取出T1和T2组成一棵二叉树T；再将T插入到F中，并使F依据根结点的值有序。</li><li>反复执行③直到F={T}为止。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="h.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>霍夫曼树的编码</strong></p><ul><li>给定字符集</li><li>写出每个字符出现的次数组成的集合。</li><li>对此集合进行霍夫曼排序</li><li>左支为0右支为1写出每个字符的编码</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="i.png" alt title>                </div>                <div class="image-caption"></div>            </figure><blockquote><p>第三个层次：遍历方法，两个运用一个处理 </p></blockquote><p>交换左右子树</p><pre><code>PROC EXCHANGE(VAR T:BINARYTREE)BEGIN     IF T!=NULL            THEN    [SWOP(T-&gt;LSON,T-&gt;RSON)                    CALL EXCHANGE(T-&gt;LSON)                    CALL EXCHANGE(T-&gt;RSON)]END</code></pre><p>求二叉树的高度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PROC HIGHT(VAR T:BINARYTREE,H)</span><br><span class="line">BEGIN </span><br><span class="line">IF T=NULL</span><br><span class="line">THENH&lt;-0</span><br><span class="line">ELSE[CALL HIGHT(T-&gt;LSON,H1)</span><br><span class="line">CALL HIGHT(T-&gt;RSON,H2)</span><br><span class="line">H&lt;-MAX(H1,H2)+1]</span><br><span class="line">END</span><br><span class="line">``` </span><br><span class="line">叶子结点的个数</span><br><span class="line"></span><br><span class="line">```PDL</span><br><span class="line">PROC COUNTLEAF(VAR T:BINARYTREE;COUNT:INTGER)</span><br><span class="line">BIGIN</span><br><span class="line">CASE</span><br><span class="line">T=NULL:COUNT&lt;-0</span><br><span class="line">T-&gt;LSON=NULL AND T-&gt;RSON=NULL:  COUNT&lt;-1</span><br><span class="line">ELSE[CALL COUNTLEAF(T-&gt;LSON,C1)</span><br><span class="line">CALL COUNTLEAF(T-&gt;RSON,C2)</span><br><span class="line">COUNT&lt;-C1+C2]</span><br><span class="line">END CASE</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h2 id="第八章：图结构（二）"><a href="#第八章：图结构（二）" class="headerlink" title="第八章：图结构（二）"></a>第八章：图结构（二）</h2><p>1、<strong>图</strong>：由n(n≥1)个结点v1，v2，……，vn构成的数据G称为图。若结点集V=｛v1、v2……vn｝上定义的称为后继的关系E是非自反的，可表示为G=（V，E），其中V为顶点集，E为边集。<br>2、<strong>图的遍历</strong>：给出图G和其中的任意一个定点v0，从v0出发系统的访问G中所有的定点，且每个顶点（反）被访问一次，这一过程称为图的遍历。<br>3、<strong>图的遍历规律</strong>：广度优先遍历，深度优先遍历。<br>4、<strong>最小生成树</strong>：一个有 n 个结点的连通图的生成树是原图的极小连通子图，且包含原图中的所有 n 个结点，并且有保持图连通的最少的边和权重。<br>5、<strong>AOV网</strong>：若有向图G中，顶点表示活动或任务，有向边表示活动或任务之间的优先关系，则此有向图称为顶点表示活动网络（AOV网）。<br>6、<strong>AOE网</strong>：若在带权的有有向图中的顶点表示事件，有向边表示活动，权表示活动持续的时间，则此有向图称为边表示活动的网络(AOE网)。<br>7、<strong>拓扑排序</strong>：对于有向图G=(V,E)，V中的顶点的线性序列(Vi1,Vi2,……,Vin)，称作一个拓扑序列，若此结点序列满足如下条件；在G中从顶点u到顶点v有一条路径，则在序列中u必在v之前。寻找拓扑序列的有效手段就是进行拓扑排序。<br>8、<strong>关键路径</strong>：任务计划作业图上的需要时间最长的路径（可有多条），它决定完成总任务的时间。  </p><blockquote><p>第二个层次</p><ul><li>图的邻接表和邻接矩阵的存储方法  </li><li>图的深度和广度遍历的方法  </li><li>Prim和Kruskal算法  </li></ul></blockquote><p><strong>邻接表和邻接矩阵的表示</strong><br>有向图中邻接表的表示：<br><img src="j.png" alt><br>网的邻接矩阵：<br><img src="k.png" alt><br><strong>深度优先搜索</strong><br><img src="l.png" alt><br><strong>广度优先搜索</strong><br><img src="m.png" alt>  </p><p><strong>prim算法构造最小生成树</strong><br>每一步都找已连通的树中权最小的边用来构造<br><img src="n.png" alt></p><p><strong>Kruskal算法构造最小生成树</strong><br>按照权值递增的顺序逐个考虑E中的每条边：<br><img src="o.png" alt></p><h2 id="第九章：排序（二、三）"><a href="#第九章：排序（二、三）" class="headerlink" title="第九章：排序（二、三）"></a>第九章：排序（二、三）</h2><p>1、<strong>排序</strong>：设含有n个记录的集合为R=｛r1，r2，……，rn｝，其对应的关键字集合为k=｛k1，k2，……，kn｝，给定关系α，按照关系α针对关键字集合k对R进行运算，是的R有如下序列：<br>（rα1，rα2，……，rαn）<br>我们将这个操作过程称为排序。<br>2、<strong>排序分类</strong>：分为外部排序和内部排序。<br>内部排序包括  </p><ul><li>插入排序  </li><li>交换排序  </li><li>选择排序  </li><li>合并排序  </li><li>枚举排序  </li><li>分配排序  </li></ul><p>3、<strong>排序稳定性</strong>：在排序关系下，假设排序前ri在rj之前，排序之后领先关系不变，则称此排序过程方法是稳定的，否则是不稳定的。<br>4、<strong>堆</strong>：设L是长度n的表，其数据元素满足：<br>L(i)≤L(2i)且L(i)≤L(2i+1), 1≤i≤[n/2] 或反之。<br>则称L是一个堆。  </p><blockquote><p>第二个层次  </p><ul><li>直接插入  </li><li>快速排序  </li><li>二路归并  </li><li>基数  </li><li>堆的构造  </li></ul></blockquote><p><strong>直接插入</strong><br>从一个零集合开始，将 r 按照排序关系插入到一个已经有序的文件适当位置。<br><img src="p.png" alt></p><p><strong>快速排序</strong><br>基本方法：</p><pre><code>PROC QuickSort(VAR R:ARRAY[1..n] OF datatype;l,p:integer);BEGIN         IF l≥p THEN exit ;     i←l;  j←p; x←R[i];   REPEAT         WHILE (x.key≤R[j].key)AND(i＜j) DO j←j-1;         IF  i＜j             THEN 【 R[i]←R[j]; i←i+1;                 WHILE (R[i].key＜x.key)AND(i＜j) DO i←i+1;                   IF  i＜j  THEN【 R[j]←R[i];    j←j-1; 】                】   UNTIL    i=j;     R[i]←x; i←i+1; j←j-1;    IF  l＜j THEN CALL QuickSort(R, l , j);    IF  i＜p THEN CALL QuickSort(R, i , p);END; </code></pre><p><strong>二路插入</strong><br>两个两个合并，然后四个四个合并，然后大的合并<br><strong>堆的构造</strong><br>1.先插入，然后往上爬。<br><img src="q.png" alt><br>2.先排列，然后从第一半个节点开始往上爬。<br><img src="y.png" alt><br><strong>基数排序</strong><br>看最低位，一次装进是个桶里，然后拿出来。<br>再装第二位，最后装第三位。<br><img src="r.png" alt></p><blockquote><p>第三个层次：二分插入排序</p></blockquote><p>与直接插入排序的区别：在插入第i个时搜索采用二分策略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PROC DUOSORT(VAR R:ARRAY[1..N])</span><br><span class="line">BIGIN</span><br><span class="line">FOR I&lt;-2 TODO N DO[</span><br><span class="line">X&lt;-R[I],L &lt;- 1,H &lt;- I</span><br><span class="line">WHILE L&lt;=H DO[</span><br><span class="line">M&lt;-(L+H)DIV2</span><br><span class="line">IFX&lt;A[M]</span><br><span class="line">THEN H&lt;-(M-1)</span><br><span class="line">ELSE L&lt;-(L+1)</span><br><span class="line">]</span><br><span class="line">FOR J&lt;-(I-1) TODO L DO R[J+1] &lt;- R[J]</span><br><span class="line">R[L] &lt;- X </span><br><span class="line">]</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h2 id="第十章：数据检索（二、三）"><a href="#第十章：数据检索（二、三）" class="headerlink" title="第十章：数据检索（二、三）"></a>第十章：数据检索（二、三）</h2><p>1、<strong>检索</strong>：在给定数据结构中查找满足某种条件的数据元素（或节点，记录）的过程。<br>2、<strong>检索分类</strong>：  </p><ul><li>基于关键字的检索；  </li><li>基于属性的检索；  </li></ul><p>3、<strong>平均检索长度</strong>：衡量检索算法的主要标准是检索过程中对关键字（或属性）要执行的平均运算次数。<br>4、<strong>AVI树</strong>：  </p><ul><li>一颗空二叉树是AVL树；  </li><li>若T是一颗非空二叉树，其访问任何结点的左右子树的相差高度不超过1，则T是AVL树。  </li></ul><p>5、<strong>碰撞</strong>：依据散列函数H计算出地址，若发现此地址已经被别的结点占用，即有两个不同的关键字映射到了同一地址空间的现象。<br>6、<strong>散列表</strong>：是一种存储方法也是一种常见的检索方法，是按关键字编址的一种技术。用散列法组织存储的表。<br>7、<strong>同义词</strong>：发生碰撞的两个关键字；<br>8、<strong>堆集现象</strong>：在散列表中插入一个新结点y时，当然它不是先前已经插入的某个节点x的同义词，但可能会出现H（y），已经被x的同义词占用的情况，这是只能将y也链接在x的同义链中，也就是说出现了y与x的同义链结成一个的情况，把连个同义词子表结合在一起的现象称为堆集现象。  </p><blockquote><p>第二层次：AVL的构造  </p></blockquote><ul><li>正常插入</li><li>当不满足平衡二叉树时，调整</li><li>调整要求中序顺序不变</li><li>RL或LR调整要把整个x都要挪上去</li></ul><p>举例：<br><img src="z.png" alt></p><blockquote><p>第三层次：二分检索  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PROC DUOSEARCH(VAR R:ARRAY[1...MAX]OF DATATYPE;N:INTEGER;K:KTYPE)</span><br><span class="line">BEGIN</span><br><span class="line">L &lt;- 1,H &lt;- N</span><br><span class="line">WHILE L &lt;= H DO[</span><br><span class="line">MIDDLE &lt;- (L+H) DIV 2</span><br><span class="line">CASE</span><br><span class="line">K == R[MIDDLE]:WRITE&quot;SUEECE&quot;,EXIT;</span><br><span class="line">K &lt; R[MIDDLE]: H = MIDDLE-1</span><br><span class="line">K &gt; R[MIDDLE]: L = MIDDLE+1</span><br><span class="line">ENDCASE</span><br><span class="line">]</span><br><span class="line">WRITE&quot;UNSUCCSE&quot;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h2 id="十二章，文件"><a href="#十二章，文件" class="headerlink" title="十二章，文件"></a>十二章，文件</h2><p>1、    <strong>文件</strong>：为了进行存取控制、检索和修改而组织在一起的数据记录集合。<br>2、    <strong>文件逻辑组成分类</strong>：（广义）两种：  </p><ul><li>字符流文件：有序的字符流序列，文件基本单位为字节或字。  </li><li>记录文件：数据记录的集合文件基本单位为记录。</li></ul><p>3、    <strong>文件物理组成分类</strong>：<br>从存储结构来看，文件的组织仅有三种：（说大的就行了）  </p><ul><li>顺序机构：按照数据到达的时间先后次序进行组织。按该方式组织的文件称顺序文件。  </li><li>计算寻址结构：按照散列方式组织文件。该方式组织的文件称散列文件。  </li><li>带索引的结构：组织数据时需要带一个索引表。称为索引文件，主要是利用树形结构组织索引。 </li></ul><p>4、    <strong>动态存储结构</strong>：是指文件创建初始装入记录时所生成的索引结构，在系统运行过程中索引结构本身能够发生改变。<br>5、    <strong>静态存储结构</strong>：指索引结构在文件创建，初始装入记录生成，一旦生成就固定下来，在系统运行过程中索引结构并不发生变化，只有当文件重组时菜允许改变索引结构。<br>6、    <strong>B+，B-树的本质</strong>：平衡的多分树。<br>7、    <strong>B+，B-树的作用</strong>：组织动态索引结构。<br>8、    <strong>ISAM文件的本质</strong>：索引顺序存取。（静态索引结构）<br>9、    <strong>VSAM文件的本质</strong>：虚拟存储存取。（动态索引结构）<br>10、    <strong>外排基本方法</strong>：归并排序。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构知识框架&quot;&gt;&lt;a href=&quot;#数据结构知识框架&quot; class=&quot;headerlink&quot; title=&quot;数据结构知识框架&quot;&gt;&lt;/a&gt;数据结构知识框架&lt;/h1&gt;&lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="笔记" scheme="http://ranxb.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://ranxb.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据结构" scheme="http://ranxb.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>汇编语言：基础知识（第五章以前）</title>
    <link href="http://ranxb.cn/2018/01/09/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0%E4%BB%A5%E5%89%8D%EF%BC%89/"/>
    <id>http://ranxb.cn/2018/01/09/汇编语言：基础知识（第五章以前）/</id>
    <published>2018-01-09T07:22:19.000Z</published>
    <updated>2018-01-09T15:21:05.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汇编语言：基础知识（第五章以前）"><a href="#汇编语言：基础知识（第五章以前）" class="headerlink" title="汇编语言：基础知识（第五章以前）"></a>汇编语言：基础知识（第五章以前）</h1><h2 id="基基础"><a href="#基基础" class="headerlink" title="基基础"></a>基基础</h2><ul><li>数据总线：传数据用的，8线一次传1b，8086有16线</li><li>地址总线：最高可以寻到的地址，8086是20线，4线一个16进制位。</li><li>一个地址是一个内存单元就是1b，2个十六进制位。</li><li>要知道给定一个段地址之后的地址寻址范围。</li><li>inc</li><li>dec</li></ul><h2 id="寄存器的总结"><a href="#寄存器的总结" class="headerlink" title="寄存器的总结"></a>寄存器的总结</h2><h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><p>段寄存器就是存放段地址的</p><ul><li>CS</li><li>DS</li><li>SS</li><li>ES</li></ul><p><strong>段地址不支持直接将数据送入</strong>  </p><ul><li>SS：SP永远指向栈顶元素  </li></ul><p><strong>在自己写程序的过程中要注意的问题！</strong></p><ul><li>assume写全</li><li>最后int 21h</li><li>数据不能以字母开头</li><li>使用es存放目标空间的段地址</li><li>正式的程序开始时写<code>start</code>，最后写<code>end start</code></li></ul><h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><h3 id="多种寻址方式"><a href="#多种寻址方式" class="headerlink" title="多种寻址方式"></a>多种寻址方式</h3><ul><li>寄存器直接寻址</li><li>寄存器相对寻址（寄存器+idata）</li><li>基址变址寻址（寄存器+寄存器）</li><li>相对基址变址寻址（寄存器+寄存器+idata）</li></ul><h3 id="转大小写的单循环例子"><a href="#转大小写的单循环例子" class="headerlink" title="转大小写的单循环例子"></a>转大小写的单循环例子</h3><pre><code>assume cs:code,ds:data,ss:strackstrack segment dw 8 dup(0)strack endsdata segment db &apos;1. display      &apos; db &apos;2. dsjk         &apos; db &apos;3. dasdasdasd   &apos;data endscode segmentstart:    mov ax,data    mov ds,ax    mov ax,strack    mov ss,ax    mov sp,10h    mov di,0    mov cx,4hl:    mov al,[di+3]    and al,11011111b    mov [di+3],al    mov al,[di+10h+3]    and al,11011111b    mov [di+10h+3],al    mov al,[di+32+3]    and al,11011111b    mov [di+32+3],al    inc di    loop lmov ax,4c00hint 21hcode endsend start</code></pre><p>结果<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="a.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h3 id="转大小写的双循环例子"><a href="#转大小写的双循环例子" class="headerlink" title="转大小写的双循环例子"></a>转大小写的双循环例子</h3><blockquote><p>注意bx和si的同时使用，di和si不能同时使用</p></blockquote><pre><code>assume cs:code,ds:data,ss:strackstrack segment dw 8 dup(0)strack endsdata segment db &apos;1. display      &apos; db &apos;2. dsjk         &apos; db &apos;3. dasdasdasd   &apos;data endscode segmentstart:mov ax,datamov ds,axmov ax,strackmov ss,axmov sp,10hmov di,0mov cx,4mov si,0l:push cxmov cx,3l0:mov al,[si+di+3]and al,11011111bmov [di+3],alinc diloop l0mov di,0add si,16pop cxloop lmov ax,4c00hint 21hcode endsend start</code></pre><p>结果<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="b.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h2 id="指令的转移"><a href="#指令的转移" class="headerlink" title="指令的转移"></a>指令的转移</h2><h3 id="jmp"><a href="#jmp" class="headerlink" title="jmp"></a>jmp</h3><ul><li><code>jmp short 标号</code>  -128~127</li><li><code>jmp near ptr 标号</code>        -32768~32767</li><li><code>jmp far ptr 标号</code></li><li><code>jmp 16位reg</code>  IP = reg</li><li><code>jmp word ptr 地址</code>        段内转移：jmp word ptr ds:[0]，设置IP</li><li><code>jmp dword ptr 地址</code>    段间转移，先赋值IP</li></ul><h3 id="jcxz"><a href="#jcxz" class="headerlink" title="jcxz"></a>jcxz</h3><p>当cx为0时跳转，范围-128～127</p><h3 id="ret和retf"><a href="#ret和retf" class="headerlink" title="ret和retf"></a>ret和retf</h3><p>都是先对IP进行操作</p><pre><code>pop ippop cs</code></pre><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><ul><li>call 标号</li><li>call far ptr 标号  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push cs</span><br><span class="line">push ip</span><br></pre></td></tr></table></figure><ul><li>call word ptr 地址</li><li>call dword ptr 地址</li></ul><h3 id="mul乘法"><a href="#mul乘法" class="headerlink" title="mul乘法"></a>mul乘法</h3><ul><li>双8位，一个放al，结果ax</li><li>双16位，一个放ax，结果高位dx低位ax</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,1</span><br><span class="line">mov bl,2</span><br><span class="line">mul bl</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,1</span><br><span class="line">mov byte ptr ds:[0],2</span><br><span class="line">mul byte ptr ds:[0]</span><br></pre></td></tr></table></figure></p><h3 id="div除法"><a href="#div除法" class="headerlink" title="div除法"></a>div除法</h3><blockquote><p>低位是商高位是余数</p></blockquote><ul><li>16位除以8位，前面的数放在ax里</li><li>32位除以16位，高位dx，低位ax</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div byte ptr ds:[0];默认被除数是ax</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov bx,10</span><br><span class="line">div bx；默认被除数高位是dx，低位时ax</span><br></pre></td></tr></table></figure></p><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p>流程：</p><ul><li>取得中断码</li><li>pushf</li><li>设置标志寄存器</li><li>CS和IP入栈</li><li>设置IP，设置CS</li></ul><h3 id="中断向量表"><a href="#中断向量表" class="headerlink" title="中断向量表"></a>中断向量表</h3><p>四个字节一个中断地址<br>前两个是IP<br>后两个是CS</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>这里进行模拟loop的安装，位置7ch。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;汇编语言：基础知识（第五章以前）&quot;&gt;&lt;a href=&quot;#汇编语言：基础知识（第五章以前）&quot; class=&quot;headerlink&quot; title=&quot;汇编语言：基础知识（第五章以前）&quot;&gt;&lt;/a&gt;汇编语言：基础知识（第五章以前）&lt;/h1&gt;&lt;h2 id=&quot;基基础&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="汇编语言" scheme="http://ranxb.cn/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="笔记" scheme="http://ranxb.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="汇编语言" scheme="http://ranxb.cn/tags/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>数字电路进阶（第六章以后）</title>
    <link href="http://ranxb.cn/2018/01/08/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E8%BF%9B%E9%98%B6%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0%E4%BB%A5%E5%90%8E%EF%BC%89/"/>
    <id>http://ranxb.cn/2018/01/08/数字电路进阶（第六章以后）/</id>
    <published>2018-01-08T13:46:16.000Z</published>
    <updated>2018-01-09T12:03:26.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字电路进阶（第六章以后）"><a href="#数字电路进阶（第六章以后）" class="headerlink" title="数字电路进阶（第六章以后）"></a>数字电路进阶（第六章以后）</h1><h2 id="时序逻辑电路的应用"><a href="#时序逻辑电路的应用" class="headerlink" title="时序逻辑电路的应用"></a>时序逻辑电路的应用</h2><blockquote><p>比如寄存器、锁存器、移位寄存器、计数器。。。</p></blockquote><p>寄存器什么都没有。<br>重点就是74ls290，看第六章的具体内容。  </p><ul><li><a href="http://ranxb.cn/2018/01/06/数字电路第六章：同步时序逻辑电路——下/#异步集成计数器74LS290">74LS290</a></li><li>环形计数器是将移位型寄存器最后一级反馈到第一级的输入端，特点是构成寄存器的模数和所用触发器的个数相同，只能利用四个状态，比较浪费。利用的是74LS194  </li><li>扭环形计数器是将最后一级的反变量反馈到第一级，不能自启动需要置零可以利用所有状态。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字电路进阶（第六章以后）&quot;&gt;&lt;a href=&quot;#数字电路进阶（第六章以后）&quot; class=&quot;headerlink&quot; title=&quot;数字电路进阶（第六章以后）&quot;&gt;&lt;/a&gt;数字电路进阶（第六章以后）&lt;/h1&gt;&lt;h2 id=&quot;时序逻辑电路的应用&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="数字电路" scheme="http://ranxb.cn/categories/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
    
      <category term="数字电路" scheme="http://ranxb.cn/tags/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
      <category term="笔记" scheme="http://ranxb.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数字电路：基础知识</title>
    <link href="http://ranxb.cn/2018/01/08/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://ranxb.cn/2018/01/08/数字电路：基础知识/</id>
    <published>2018-01-08T10:08:34.000Z</published>
    <updated>2018-01-09T12:04:02.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字电路：基础知识"><a href="#数字电路：基础知识" class="headerlink" title="数字电路：基础知识"></a>数字电路：基础知识</h1><blockquote><p>你可以理解为第五章之前的内容</p></blockquote><h2 id="各个码"><a href="#各个码" class="headerlink" title="各个码"></a>各个码</h2><h3 id="反码、补码"><a href="#反码、补码" class="headerlink" title="反码、补码"></a>反码、补码</h3><ul><li>反码：大于零的不变，小于零的除符号位全取反</li><li>补码：大于零的和原码一样，小于零的在最低位加1</li><li>运算：补码和补码都可以进行直接运算，两个直接相加，最高位溢出的话直接丢掉。反码运算的话需要把溢出位加到最后一位上。</li></ul><h3 id="十进制的补数"><a href="#十进制的补数" class="headerlink" title="十进制的补数"></a>十进制的补数</h3><ul><li>对十的补数：符号位是0(+)和9(-),两种方法,一是加后符号位后每个数值对十取反，就是用9减，然后最低位加一；二是几位就用10的几次方减原来那个数。<br><code>[5493] = 05493  [-3250] = 96750  [-0.3267] = 9.6733</code></li><li>对9的补数：类似，符号位是0和8，数字位用9减。末尾不加一<br><code>[8954] = 08954   [-3250] = 95639 [-25.639] = 974.360</code>  </li><li>运算：对十的补码运算溢出要丢掉，对九的补码运算溢出要加到最低位</li></ul><h3 id="码制和字符代码"><a href="#码制和字符代码" class="headerlink" title="码制和字符代码"></a>码制和字符代码</h3><ul><li>恒权代码：8421bcd、5421bcd、2421bcd、5211bcd</li><li>循环码：只有一位和周边俩不同的码</li><li>余三码：在8421的基础上加三个开始往后数</li><li>余三循环码：在循环码的基础上加三开始往后数</li><li>奇偶校验码：1的个数为奇偶数，在汇编中PF中当1的个数为偶数的时候标志为1</li><li>ASCII码：<strong>小写字母在大写字母后面</strong>，<strong>大于61H的是小写</strong>，将’a’的ASCII码<strong>减20H就可以变成大写</strong>字母’A’，将’A’的ASCII码<strong>加20H就可以变成小写</strong>字母’a’，ASCII码的<strong>二进制形式第六位为1时是小写字母</strong>，0时大写字母</li></ul><h2 id="逻辑函数"><a href="#逻辑函数" class="headerlink" title="逻辑函数"></a>逻辑函数</h2><ul><li>各个门的符号，与门（中间一个&amp;），或门（中间一个&gt;=1），非门（中间一个1后面加圈圈），异或（环和，中间=1），同或（环积，异或后面加圈圈）</li><li>最大项（各个项加起来）、最小项（各个项乘起来）</li><li>代数规律，两积可交换，乘零得零，分配律</li><li>卡诺图，2<sup>n</sup>种的可以画圈圈，出来的圈圈是最小项的形式。</li><li>三态门：高电平、低电平、高阻态</li></ul><h2 id="组合逻辑电路"><a href="#组合逻辑电路" class="headerlink" title="组合逻辑电路"></a>组合逻辑电路</h2><ul><li>做题方法：写出真值表需求逻辑表达式，用卡诺图化简，化简完成之后电路表达。</li><li>竞争与冒险判别方法：各种情况的代入，只留一种变量不变，若出现如f = a + 非a的情况，存在竞争，竞争的结果是冒险。卡诺图法，有相切的部分有竞争</li><li>消除竞争的方法：添加冗余项，把相切的地方添加至电路。滤波法选通法（这俩没用）</li></ul><h2 id="优先编码器-74148"><a href="#优先编码器-74148" class="headerlink" title="优先编码器 74148"></a>优先编码器 74148</h2><p>允许同时输入两个以上编码信号，在同时存在两个或两个以上输入信号时，优先编码器只按优先级高的输入信号编码，优先级低的则不起作用。</p><blockquote><p>74148是一个8线-3线优先编码器，8线指的输入、3线是输出。特点是端口都是非。</p></blockquote><ul><li>非I<sub>0</sub>~非I<sub>7</sub>是输入信号。  </li><li>非I<sub>e</sub>是输入端，若为1则禁止编码。输出均为1，若为0则正常工作  </li><li>非O<sub>e</sub>使能输出端，低电频工作表示“电路工作，但无编码输入”  </li><li>非G<sub>e</sub>为片优先编码输出端，低电频工作表示“电路工作，且有编码输入”  </li></ul><p>IOG均为扩展时所用。   </p><ul><li>由于输出带非门，所以输出的是二进制反码</li><li>由于输入带非门，所以输入0为有效</li></ul><p>扩展时例图为<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="a.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h3 id="译码器-74138"><a href="#译码器-74138" class="headerlink" title="译码器 74138"></a>译码器 74138</h3><p>和74148差不离，输出是反码，输入是原码，3-8输出译码器。  S1是原码，S23是反码</p><ul><li>S1要输入高电频，S23口要输入低电频才可以正常工作，否则都为1。正常工作示意图：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="b.png" alt title>                </div>                <div class="image-caption"></div>            </figure>可以把它当成最小项，做一些需要最小项的题  </li><li>两个的扩展，可以把低位的s2或3接到高位的s1上，这样就可以控制一个工作一个不工作，其他的都接地，如图<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="c.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><h3 id="数据选择器"><a href="#数据选择器" class="headerlink" title="数据选择器"></a>数据选择器</h3><blockquote><p>只有非S是反码，是控制端，0正常工作，两个选择端，四个数据输入端。</p></blockquote><p>直接看题<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="d.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字电路：基础知识&quot;&gt;&lt;a href=&quot;#数字电路：基础知识&quot; class=&quot;headerlink&quot; title=&quot;数字电路：基础知识&quot;&gt;&lt;/a&gt;数字电路：基础知识&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;你可以理解为第五章之前的内容&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
      <category term="数字电路" scheme="http://ranxb.cn/categories/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
    
      <category term="数字电路" scheme="http://ranxb.cn/tags/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
      <category term="笔记" scheme="http://ranxb.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数字电路第六章：同步时序逻辑电路——下</title>
    <link href="http://ranxb.cn/2018/01/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E2%80%94%E2%80%94%E4%B8%8B/"/>
    <id>http://ranxb.cn/2018/01/06/数字电路第六章：同步时序逻辑电路——下/</id>
    <published>2018-01-06T08:29:26.000Z</published>
    <updated>2018-01-06T13:47:29.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字电路第六章：同步时序逻辑电路——下"><a href="#数字电路第六章：同步时序逻辑电路——下" class="headerlink" title="数字电路第六章：同步时序逻辑电路——下"></a>数字电路第六章：同步时序逻辑电路——下</h1><h2 id="状态编码"><a href="#状态编码" class="headerlink" title="状态编码"></a>状态编码</h2><blockquote><p>在求得最简状态码之后，需要对状态表中用字母或数字表示的状态用一组二进制代码来代替，称之为状态编码（也叫状态赋值或状态分配）</p></blockquote><h3 id="状态编码的任务"><a href="#状态编码的任务" class="headerlink" title="状态编码的任务"></a>状态编码的任务</h3><ol><li>确定状态编码的长度，即二进制代码的位数或者是触发器的个数。  </li><li>确定二进制编码的分配方案。  </li></ol><h3 id="状态编码的长度确定"><a href="#状态编码的长度确定" class="headerlink" title="状态编码的长度确定"></a>状态编码的长度确定</h3><p>每个触发器可以代表一位二进制数，n个触发器可以代表n位二进制数，组成2<sup>n</sup>个二进制代码。</p><p>所需状态数M和触发器个数n之间应满足以下关系:  2<sup>n-1</sup> &lt; M ≤ 2<sup>n</sup>  </p><h3 id="确定二进制编码分配方案"><a href="#确定二进制编码分配方案" class="headerlink" title="确定二进制编码分配方案"></a>确定二进制编码分配方案</h3><p>因为编码和状态配合的方式很多，徐阿哟选择最佳的编码方式。<br>若当N=4, n=2时，就有24种状态分配方案。随着状 态数目的增加，状态分配方案的总数将急剧增加。<strong>状态编码解决的主要问题是确定一组使次态函数(或驱动方程)和输出函数尽可能简单、可靠的 状态编码,称之为最佳编码。</strong></p><h3 id="分配的基本原则"><a href="#分配的基本原则" class="headerlink" title="分配的基本原则"></a>分配的基本原则</h3><ul><li>在状态表中同一输入下的相同次态所对应的现态，尽可能分配相邻编码。通常称为“<strong>次态相同，现态编码相邻</strong>”。</li><li>在状态表中，同一现态，相邻输入下的不同次态，应尽可能分配相邻编码。通常称为“<strong>同一现态，次态编码相邻</strong>”。</li><li>在状态表中某些输出完全相同的现态。那么尽可能给现态分配相邻的编码，通常称“<strong>输出相同，现态编码相邻</strong>”。</li><li>在状态表中，<strong>出现次数最多的状态通常给予逻辑0的编码</strong>。  </li></ul><p><strong>注意</strong>：一般情况下，应优先考虑原则(1)，因为原则 (1)最重要！例：<br><img src="a.png" alt><br>结果如下：<br><img src="b.png" alt>  </p><h2 id="同步时序逻辑电路设计举例"><a href="#同步时序逻辑电路设计举例" class="headerlink" title="同步时序逻辑电路设计举例"></a>同步时序逻辑电路设计举例</h2><h3 id="例题一"><a href="#例题一" class="headerlink" title="例题一"></a>例题一</h3><p>例题：试设计一个序列数据检测器，该电路用来检测输入的串行二进制序列，当输入连续出现110时，检测器输出为1，其他情况下输出为0。</p><ol><li>进行逻辑抽象画出状态转换图和状态转换表<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="c.png" alt title>                </div>                <div class="image-caption"></div>            </figure>  <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="d.png" alt title>                </div>                <div class="image-caption"></div>            </figure>  </li><li>进行状态化简，因为全部确定，建立最简等效类<br><img src="e.png" alt></li><li>状态编码，状态可用两个二进制编码表示，S0出现的最多设为00，S1=01，S2=11<br><img src="f.png" alt></li><li>根据状态表求出状态方程，驱动方程和输出方程，画出Z的卡诺图，Q2n+1和Q1n+1的卡诺图<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="g.png" alt title>                </div>                <div class="image-caption"></div>            </figure>  并根据卡诺图的化简结果写出输出方程，状态方程，并带入触发器的特征方程写出驱动方程。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="h.png" alt title>                </div>                <div class="image-caption"></div>            </figure>  </li><li>经过对比特征方程的标准形式，写出j和k，并画出逻辑电路图。<br><img src="i.png" alt></li><li>判断自启动，当电路处于无关状态时，是否可以通过时钟脉冲的作用下进入有效状态。</li></ol><h3 id="例题二"><a href="#例题二" class="headerlink" title="例题二"></a>例题二</h3><p>例题：试设计一个同步七进制计数器，要求按二进制加计数规律变化。</p><p>确定状态转换情况，注意看题是七进制，因此111位无效情况。<br><img src="j.png" alt><br>确定编码状态<br><img src="k.png" alt><br>因为是Moore型电路，跟输入无关，所以卡诺图这么画<br><img src="l.png" alt><br>通过卡诺图写出状态方程，经验来看Moore型电路都用D触发器<br><img src="m.png" alt><br>写出驱动方程，画出电路图<br><img src="n.png" alt><br>最后检查一下自启动<br><img src="o.png" alt>  </p><h2 id="常用集成时序逻辑电路及应用"><a href="#常用集成时序逻辑电路及应用" class="headerlink" title="常用集成时序逻辑电路及应用"></a>常用集成时序逻辑电路及应用</h2><blockquote><p>寄存器好像不考，直接计数器了。</p></blockquote><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p>一种对输入脉冲信号进行计数的时序逻辑部件。<br>可以分为：  </p><ul><li>二进制计数器和非二进制计数器</li><li>加计数器、减计数器和可逆计数器</li><li>同步计数器和异步计数器</li></ul><h4 id="集成计数器"><a href="#集成计数器" class="headerlink" title="集成计数器"></a>集成计数器</h4><h5 id="同步集成计数器74LS191"><a href="#同步集成计数器74LS191" class="headerlink" title="同步集成计数器74LS191"></a>同步集成计数器74LS191</h5><p><strong>74LS191</strong><br><img src="p.png" alt><br>功能及其真值表<br><img src="q.png" alt></p><h5 id="异步集成计数器74LS290"><a href="#异步集成计数器74LS290" class="headerlink" title="异步集成计数器74LS290"></a>异步集成计数器74LS290</h5><p><strong>74LS290重点！</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="r.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>中规模集成电路74LS290是典型的异步BCD码十进制计数器。<br>逻辑电路如下<br><img src="s.png" alt><br><strong>功能分析</strong> </p><ul><li>若在CPa端输入时钟脉冲，则Qa输出信号是CPa的脉冲二分频  </li><li>FB,FC,FD三个触发器构成的逻辑电路是一个异步五进制计数器，其CPB为计数脉冲输入端，QD为输出端。即QD的输出信号是CPB脉冲的五分频。  </li><li>若将CPB与QA相连，同时以CPA为输入计数脉冲端。QD的输出为十进制计数器(或十分频器)。<br>因此，又将这个电路称为二、五、十进制异步计数器。<br><strong>真值表</strong><br><img src="t.png" alt><br><strong>真值表的分析</strong>  </li><li>直接复位输入端R01和R02：当R01=R02=1，且S91,S92中有“0”时，可使各触发器清为零。  </li><li>置“9”输入端S91和S92：其状态QDQCQBQA = 1001,这就是置“9”功能。  </li><li>在置“9”输入端S91,S92和复位输入端R01,R02中均有“0”电平时，74LS290可实现计数功能。  </li></ul><p><strong>任意进制计数器的构造方法</strong><br>例：用74LS290和适当的门电路构成64进制计数器，采用5421BCD码计数。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="u.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><ul><li>Cb和Qa接时，Ca输入时钟信号，输出顺序为dcba，计数方式为8421</li><li>Ca和Qd接时，Cb接时钟信号，输出顺序为adcb，计数方式为5421</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="v.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h5 id="环形计数器"><a href="#环形计数器" class="headerlink" title="环形计数器"></a>环形计数器</h5><p>环形计数器是将移位寄存器的最后一级输出 反馈到第一级串行输入端SR，特点是构成的 计数器模数M和所用触发器个数n相等。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="w.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字电路第六章：同步时序逻辑电路——下&quot;&gt;&lt;a href=&quot;#数字电路第六章：同步时序逻辑电路——下&quot; class=&quot;headerlink&quot; title=&quot;数字电路第六章：同步时序逻辑电路——下&quot;&gt;&lt;/a&gt;数字电路第六章：同步时序逻辑电路——下&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="数字电路" scheme="http://ranxb.cn/categories/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
    
      <category term="数字电路" scheme="http://ranxb.cn/tags/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
      <category term="笔记" scheme="http://ranxb.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数字电路第六章：同步时序逻辑电路——上（状态编码之前）</title>
    <link href="http://ranxb.cn/2018/01/06/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%AC%E5%85%AD%E7%AB%A0%EF%BC%9A%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E2%80%94%E2%80%94%E4%B8%8A%EF%BC%88%E7%8A%B6%E6%80%81%E7%BC%96%E7%A0%81%E4%B9%8B%E5%89%8D%EF%BC%89/"/>
    <id>http://ranxb.cn/2018/01/06/数字电路第六章：同步时序逻辑电路——上（状态编码之前）/</id>
    <published>2018-01-05T16:55:39.000Z</published>
    <updated>2018-01-06T08:23:13.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字电路第六章：同步时序逻辑电路——上（状态编码之前）"><a href="#数字电路第六章：同步时序逻辑电路——上（状态编码之前）" class="headerlink" title="数字电路第六章：同步时序逻辑电路——上（状态编码之前）"></a>数字电路第六章：同步时序逻辑电路——上（状态编码之前）</h1><blockquote><p>讲同步时序逻辑电路的工作原理、分析方法和设计方法。<br>逻辑电路分为：组合逻辑电路和时序逻辑电路。<br>组合逻辑电路是指典礼在任何时刻所产生的输出仅取决于该时刻电路的输入。<br>时序逻辑电路按其工作方式不同分为：同步时序逻辑电路、异步时序逻辑电路。<br>本章介绍同步时序逻辑电路的分析与设计。    </p></blockquote><h2 id="同步时序逻辑电路的模型和描述方法"><a href="#同步时序逻辑电路的模型和描述方法" class="headerlink" title="同步时序逻辑电路的模型和描述方法"></a>同步时序逻辑电路的模型和描述方法</h2><h3 id="同步时序逻辑电路的结构模型"><a href="#同步时序逻辑电路的结构模型" class="headerlink" title="同步时序逻辑电路的结构模型"></a>同步时序逻辑电路的结构模型</h3><p>同步时序逻辑电路是一种与时序有关的电路，一般说来，是由组合电路和存储电路两部分组成，并形成反馈电路。<br><img src="a.png" alt><br><strong>组合逻辑电路的输出</strong>  </p><ol><li>向外输出 Z   </li><li>内部输出 Q </li></ol><p><strong>组合逻辑电路的输入</strong>  </p><ol><li>外部输入：整个时序电路的输入 X  </li><li>内部输入：存储电路的内部输出 Y  </li></ol><p><strong>函数的意义</strong><br>Zi称为输出函数<br>Yj称为驱动方程<br>Mealy型电路：Z的输出既和存储电路的输出有关有和当前状态的输入x有关。<br>Moore型电路：Z的输出只和存储电路的输出有关。<br><strong>采用时钟控制的触发器构成存储电路</strong><br>存储时序电路中的二进制信息被定义为电路的状态，触发器的状态就称为时序电路的状态。<br><strong>向量函数</strong><br><img src="b.png" alt><br>时钟信号不能间隔过短，要状态状态稳定后再一个信号再来。  </p><h3 id="同步时序逻辑电路的描述方法"><a href="#同步时序逻辑电路的描述方法" class="headerlink" title="同步时序逻辑电路的描述方法"></a>同步时序逻辑电路的描述方法</h3><p>为了形象的表示时序逻辑电路的全过程性，把电路在一系列的时钟信号作用下状态转换的全过程找出来，则电路的逻辑功能就一目了然了。<br>描述时序电路状态的转换全部过程的方法：  </p><ol><li>状态方程  </li><li>状态转换表（状态转换真值表）  </li><li>状态转换图（简称状态图）  </li><li>时序图（波形图）  </li></ol><h4 id="状态方程"><a href="#状态方程" class="headerlink" title="状态方程"></a>状态方程</h4><p>输出方程：表示输出与输入和现态的关系<br>驱动方程：表示现态向次态转换所需的条件<br>状态方程：表示在给定的输入下将使现态转向状态  </p><h4 id="状态转换表"><a href="#状态转换表" class="headerlink" title="状态转换表"></a>状态转换表</h4><p>由现态Q、次态Qn+1和输出Z组成。<br>例：<br><img src="c.png" alt><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="d.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="e.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h4 id="状态转换图"><a href="#状态转换图" class="headerlink" title="状态转换图"></a>状态转换图</h4><p>在状态转换图中以圆圈表示电路的各个状态，以箭头表示状态转换的方向。 同时，还在箭头旁注明了状态转换前的输入变量取 值和输出值。通常将输入变量取值写在斜线以上，将输出值写在斜线以下。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="f.png" alt title>                </div>                <div class="image-caption"></div>            </figure>  </p><h4 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h4><p>将状态转换表的内容画成时间波形图。在时钟脉冲序列作用下，电路状态、输出状态随时间变化的波形图叫做时序图。而且便于用实验观察的方法检查时序电路的逻辑功能。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="g.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h2 id="同步时序逻辑电路的分析方法"><a href="#同步时序逻辑电路的分析方法" class="headerlink" title="同步时序逻辑电路的分析方法"></a>同步时序逻辑电路的分析方法</h2><p>根据给定的逻辑电路图，找出他的状态方程、输出方程、状态图和时序图。用这些方法来描述电路的工作全过程及输入输出关系。</p><h3 id="时序逻辑电路的分析步骤"><a href="#时序逻辑电路的分析步骤" class="headerlink" title="时序逻辑电路的分析步骤"></a>时序逻辑电路的分析步骤</h3><p>找出给定时序电路的逻辑功能即找出在输入信号和时钟信号作用下，电路的次态和输出。一般步骤如下：  </p><ol><li>根据给定的逻辑电路图，写出每个触发器的驱动方程（控制方程）。  </li><li>把得到的驱动方程带入相应的触发器的特性方程，得出每个触发器的状态方程，从而写出这些状态方程的方程组。并写出输出方程。  </li><li>建立状态转换真值表  </li><li>做出状态图和时序波形图。  </li><li>总结功能。  </li></ol><h3 id="同步时序电路分析的例子"><a href="#同步时序电路分析的例子" class="headerlink" title="同步时序电路分析的例子"></a>同步时序电路分析的例子</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="h.png" alt title>                </div>                <div class="image-caption"></div>            </figure>  <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="i.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="j.png" alt title>                </div>                <div class="image-caption"></div>            </figure>  <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="k.png" alt title>                </div>                <div class="image-caption"></div>            </figure><ol><li>找每个触发器的输入端，写方程，=1的框框是环和。  </li><li>把写好的方程带入触发器的特征方程例，写出次态的状态方程，在找输出端写出输出方程。  </li><li>列表，横纵分别有触发器现态和输入值，结果是触发器次态和输出值。  </li><li>画圈圈，把触发器的变化过程用圈圈画出来，箭头写上输入值和输出值。  </li><li>总结。  </li></ol><p><strong>注意</strong>，Moore型的因为次态和输入无关，所以只列输出的表的顺序即可，Mealy型的因为和输入有关所以要建和输入有关的表，注意没有排列到的状态要单独加上，类似于：<br><img src="l.png" alt><br>整个例如Moore型的例题：<br><img src="m.png" alt><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="n.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h2 id="同步时序逻辑电路的设计"><a href="#同步时序逻辑电路的设计" class="headerlink" title="同步时序逻辑电路的设计"></a>同步时序逻辑电路的设计</h2><h3 id="设计同步时序逻辑电路的过程"><a href="#设计同步时序逻辑电路的过程" class="headerlink" title="设计同步时序逻辑电路的过程"></a>设计同步时序逻辑电路的过程</h3><ol><li>根据实际要求进行逻辑抽象，得出电路的原始状态转换图和转换表。   </li><li>状态化简，求最简状态化简表。  </li><li>状态编码。第一步. 确定触发器的数目n 第二步. 给每个电路状态分配一组二进制代码，称为状态编码。  </li><li>选定触发器类型，求出电路的状态方程。根据状态转换图(或状态转换表)和选定的状态编码、触发器的类型，就可写出电路的状态方程、驱动方程和输出方程。  </li><li>根据方程式画出逻辑电路图。  </li><li>检查自启动，解决办法：一、通过预置数。二、修改逻辑设计。  </li></ol><p>整体步骤如图所示：<br><img src="o.png" alt></p><h3 id="建立原始状态转换图和转换表"><a href="#建立原始状态转换图和转换表" class="headerlink" title="建立原始状态转换图和转换表"></a>建立原始状态转换图和转换表</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="p.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="完全确定原始状态表化简"><a href="#完全确定原始状态表化简" class="headerlink" title="完全确定原始状态表化简"></a>完全确定原始状态表化简</h3><p>状态表化简的原则（若状态表中的任意两个状态Si和Sj，同时满足下列两个条件，则他们可以合并成一个状态）：  </p><ol><li>在所有可能的现输入下，两个（或多个）状态相应的现输出分别相同。</li><li>在所有可能的现输入下，次态分别为下列情况之一：<br> a. 两个次态完全相同<br> b. 两个次态为状态对循环的一个状态对<br> c. 两个次态为其现态本身或交错<br> d. 两个次态的某一后序状态可以合并  </li></ol><p>上述的第一个条件是状态合并的必要条件，该条件不满足就无需再考虑第二个条件。  </p><p>根据状态表化简的原则，利用下列判别方法造出状态表中全部的出状态并对进行分类合并。 </p><ol><li>等效状态和等效类<br><strong>等效状态</strong>—满足上述合并条件的两个状态如Si和Sj称为等效状态，或称等效状态对，记为{Si, Sj}。<br><strong>等效状态的传递性</strong>——若状态Si和Sj等效,状态Sj和Sm等效，则状态Si必和Sm等效,称为等效状态的传递性，记为{Si,Sj}{Sj,Sm}→{Si,Sm}   </li></ol><p><strong>等效类</strong>——彼此等效状态的集合。<br><strong>最大等效类</strong>——若一个等效类不包含在任何其它等效类之中，则称它为最大等效类。这里说的最大，并不是指包含的状态最多，而是指他的<strong>独立性</strong>！。  </p><p>显然，状态表的化简的根本任务在于从原始状态表中找出最大等效类，并用一个状态代替。例如：<br><img src="q.png" alt>  </p><ol start="2"><li>用隐含表法化简<br>隐含表是一个斜边为阶梯型的直角三角形网络。及横向和纵向格数相同，格数为原始状态表的状态数减一。<br>然后顺序比较，往表格里填东西。依次比较，若两个状态不是等效对就画X，如果两个状态是等效对则画√，若不确定的则写出下一组状态对，如表：<br><img src="r.png" alt><br>例如CF对完全相同则画✅，又例如AD输出Z都不一样则画叉。还有比如AB两个，输出一样，但是X=0时的次态不同，则无法确定则将CF写入，X=1时因为是两个交换对所以是满足的条件，不用将其写入。最后列出下表：<br><img src="s.png" alt><br>根据等效关系的传递性，对等效状态对 {A,B}、{A,E}、{B,E}构成等效类{A,B,E}。 等效状态对{C,F}也是等效类。由于等效类 {A,B,E}和{C,F}互不包含在对方的等效类中， 所以，等效类{A,B,E}和{C,F}都是最大等效类。而状态G和D不和任何其它状态等效，因此,它们本身也是一个最大等效类,分别记作{G}和{D}。因此最大等效集合<code>{A,B,E}，{C,F}，{D}，{G}</code>  </li></ol><p>建立最简状态表。最大等效类集合必须覆盖原始状态表的全部状态。原始状态表中每一个状态只能属于一个最大等效类。这样，每个最大等效类可用一个状态代替。即:<code>a={ABE} b={CF} c={D} d={G}</code>由此可得最简状态表：<br><img src="t.png" alt></p><h3 id="不完全确定状态表的化简"><a href="#不完全确定状态表的化简" class="headerlink" title="不完全确定状态表的化简"></a>不完全确定状态表的化简</h3><p>这种电路的 状态表包含着不确定的次态或输出，所以，是一种不完全确定电路。并不是任何输出序列都是有效的。不完全确定状态表的化简是基于相容状态的，再利用任意项可使状态表 化的更简。<br><strong>相容状态</strong>——再不完全确定表中，假设S1和S2为初始状态，如果对于所有的有效输入序列从状态S1和S2除法他们相应的输出序列（除不确定的那些之外）是完全相同的，那么状态S1和S2是相容的，或者说S1和S2是相容对，记作（S1，S2）<br><strong>相容状态的条件</strong>——在所有可能输入条件下，两个状态对应的输出相同，或者其中一个（或两个）输出为任意值；并且它们的次态相同、交错、循环、相容，或者其中一个（或两个）为任意状态，那么这两个状态是相容的。<br><strong>相容类</strong>——由彼此相容的状态构成的集合，处于同一相容类 中的所有状态之间都是两两相容的。<br><strong>非传递性</strong>——状态等效具有传递性，而<strong>状态相容不具有传递性</strong>。 因此，若要求(S1, S2，S3)相容，则必须(S1,S2)， (S2,S3)，(S1,S3)都是相容对。也就是说，相容类中所有状态之间都分别是两两相容的。<br><strong>最大相容类</strong>——若一个相容类不是任何其他相容类的子集，则该相容类称为最大相容类。<br>例题：<br><img src="u.png" alt><br>表中由于部分状态的次态和输出无法确定，所以是不完全确定状态表。  </p><ol><li>做隐含表并比较，如图<br><img src="v.png" alt><br>2.在相容状态对中找最大相容类<br><img src="w.png" alt>  </li><li>确定原始状态表的最小闭合覆盖集  </li><li><strong>选择一个</strong>同时满足<em>覆盖、闭合和最小</em>三个条件的<strong>相容类集合</strong>，将每个相容类用一个新状态来代替，以得到一个新的状态表。  </li></ol><p><strong>覆盖</strong>——指相容类集合中包含了原始状态表的全部状态。即原始状态表中任何一个状态至少包含在相容类集合中的一个相容类(包括最大相容类)中，而不能遗漏。<br><strong>闭合</strong>——指一个相容类集合中,任一相容类的所有隐含条件都必须属于该集合中某一个相容类(包括最大相容类)。<br><strong>最小</strong>——是指满足覆盖和闭合的相容类数目最少。不完全状态表的简化，就是寻找一个最小闭合覆盖<br>为了反应闭合和覆盖这两个性质，建立闭合覆盖表：<br><img src="x.png" alt><br>在表的左边自上而下列出所选相容类，表的中间覆盖部分自左到右列出全部状态，表的右边闭合部分列出各相容类在输入各种取值组合下的次态组合。必须指出，这里所说的相容类包括最大相容类和它们的子类。<br>找到了覆盖闭合最小之后，就可以画出最简状态表：<br><img src="y.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字电路第六章：同步时序逻辑电路——上（状态编码之前）&quot;&gt;&lt;a href=&quot;#数字电路第六章：同步时序逻辑电路——上（状态编码之前）&quot; class=&quot;headerlink&quot; title=&quot;数字电路第六章：同步时序逻辑电路——上（状态编码之前）&quot;&gt;&lt;/a&gt;数字电路第
      
    
    </summary>
    
      <category term="数字电路" scheme="http://ranxb.cn/categories/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
    
      <category term="数字电路" scheme="http://ranxb.cn/tags/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
      <category term="笔记" scheme="http://ranxb.cn/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
